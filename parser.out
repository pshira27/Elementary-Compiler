Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> line
Rule 1     line -> Input line
Rule 2     line -> EXIT empty
Rule 3     Input -> Declaration
Rule 4     Input -> Expression
Rule 5     Input -> If_Statement
Rule 6     Input -> While_Loop
Rule 7     Input -> For_Loop
Rule 8     Input -> Do_While_Loop
Rule 9     Input -> Print_Console
Rule 10    Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ;
Rule 11    Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
Rule 12    Declaration -> STRING IDENTIFIER ;
Rule 13    Declaration -> STRING STRING_ASSIGN ;
Rule 14    DeclarationTypeNumber -> INT
Rule 15    DeclarationTypeNumber -> INT16
Rule 16    IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant
Rule 17    STRING_ASSIGN -> IDENTIFIER = DQ_MSG
Rule 18    IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ]
Rule 19    ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN }
Rule 20    MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN
Rule 21    MULTI_ASSIGN -> CONSTANT empty
Rule 22    ARRAY_SIZE -> IDENTIFIER
Rule 23    ARRAY_SIZE -> OperationConstant
Rule 24    OperationConstant -> OperationStatement
Rule 25    OperationConstant -> OperationStatementInBracket
Rule 26    OperationConstant -> MinusVariable
Rule 27    OperationConstant -> CONSTANT_ALL
Rule 28    OperationConstant -> IDENTIFIER_ID
Rule 29    OperationStatementInBracket -> ( OperationStatement )
Rule 30    OperationStatement -> OperationConstant + OperationConstant
Rule 31    OperationStatement -> OperationConstant - OperationConstant
Rule 32    OperationStatement -> OperationConstant * OperationConstant
Rule 33    OperationStatement -> OperationConstant / OperationConstant
Rule 34    OperationStatement -> OperationConstant % OperationConstant
Rule 35    MinusVariable -> OperationVarDeclare OperationConstant
Rule 36    IDENTIFIER_ALL -> IDENTIFIER_ASSIGN
Rule 37    IDENTIFIER_ALL -> IDENTIFIER_ARRAY
Rule 38    IDENTIFIER_ALL -> IDENTIFIER
Rule 39    IDENTIFIER_ID -> IDENTIFIER_ARRAY
Rule 40    IDENTIFIER_ID -> IDENTIFIER
Rule 41    CONSTANT_ALL -> CONSTANT
Rule 42    CONSTANT_ALL -> IDENTIFIER
Rule 43    CONSTANT -> CONSTANT10
Rule 44    CONSTANT -> CONSTANT16
Rule 45    INC_DEC_OPRERATOR -> INC_OP
Rule 46    INC_DEC_OPRERATOR -> DEC_OP
Rule 47    OperationVarDeclare -> +
Rule 48    OperationVarDeclare -> -
Rule 49    Expression -> IDENTIFIER_ID = OperationConstant ;
Rule 50    Expression -> IDENTIFIER_ID = DQ_MSG ;
Rule 51    Expression -> ARRAY_MULTI_ASSIGN empty ;
Rule 52    Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ;
Rule 53    Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ;
Rule 54    If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else
Rule 55    Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else
Rule 56    Else_Statement -> ELSE { statements }
Rule 57    statements -> empty empty
Rule 58    statements -> Declaration statements
Rule 59    statements -> Expression statements
Rule 60    statements -> If_Statement statements
Rule 61    statements -> While_Loop statements
Rule 62    statements -> For_Loop statements
Rule 63    statements -> Do_While_Loop statements
Rule 64    statements -> Print_Console statements
Rule 65    Elif_Else -> empty
Rule 66    Elif_Else -> Elif_Statement
Rule 67    Elif_Else -> Else_Statement
Rule 68    Compare_Expreession -> OperationConstant Compare_Operator OperationConstant
Rule 69    Compare_Operator -> L_OP
Rule 70    Compare_Operator -> G_OP
Rule 71    Compare_Operator -> LE_OP
Rule 72    Compare_Operator -> GE_OP
Rule 73    Compare_Operator -> EQ_OP
Rule 74    Compare_Operator -> NE_OP
Rule 75    While_Loop -> WHILE ( Compare_Expreession ) { statements }
Rule 76    For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
Rule 77    For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
Rule 78    For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
Rule 79    For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
Rule 80    IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant
Rule 81    For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR
Rule 82    For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER
Rule 83    Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ;
Rule 84    Print_Console -> PRINT ( DQ_MSG ) ;
Rule 85    Print_Console -> PRINT ( DQ_MSG Print_Value ) ;
Rule 86    Print_Console -> PRINT_LN ( DQ_MSG ) ;
Rule 87    Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ;
Rule 88    Print_Console -> PRINT_LN ( empty empty ) ;
Rule 89    Print_Value -> empty empty empty
Rule 90    Print_Value -> , IDENTIFIER_ALL Print_Value
Rule 91    Print_Value -> , CONSTANT Print_Value
Rule 92    Print_Value -> , DQ_MSG Print_Value
Rule 93    empty -> <empty>
Rule 94    EXIT -> <empty>

Terminals, with rules where they appear

%                    : 34
(                    : 29 54 55 75 76 77 78 79 83 84 85 86 87 88
)                    : 29 54 55 75 76 77 78 79 83 84 85 86 87 88
*                    : 32
+                    : 30 47
,                    : 20 90 91 92
-                    : 31 48
/                    : 33
;                    : 10 11 12 13 49 50 51 52 53 76 76 77 77 78 78 79 79 83 84 85 86 87 88
=                    : 16 17 19 49 50 76 77 78 79 80
CONSTANT10           : 43
CONSTANT16           : 44
DEC_OP               : 46
DO                   : 83
DQ_MSG               : 17 50 84 85 86 87 92
ELIF                 : 55
ELSE                 : 56
EQ_OP                : 73
FOR                  : 76 77 78 79
GE_OP                : 72
G_OP                 : 70
IDENTIFIER           : 12 16 17 18 19 22 38 40 42 76 77 78 79 81 82
IF                   : 54
INC_OP               : 45
INT                  : 14
INT16                : 15
LE_OP                : 71
L_OP                 : 69
NE_OP                : 74
PRINT                : 84 85
PRINT_LN             : 86 87 88
STRING               : 12 13
WHILE                : 75 83
[                    : 18 19
]                    : 18 19
error                : 
{                    : 19 54 55 56 75 76 77 78 79 83
}                    : 19 54 55 56 75 76 77 78 79 83

Nonterminals, with rules where they appear

ARRAY_MULTI_ASSIGN   : 11 51
ARRAY_SIZE           : 18
CONSTANT             : 20 21 41 91
CONSTANT_ALL         : 27
Compare_Expreession  : 54 55 75 76 77 78 79 83
Compare_Operator     : 68
Declaration          : 3 58
DeclarationTypeNumber : 10 11 76 77
Do_While_Loop        : 8 63
EXIT                 : 2
Elif_Else            : 54 55
Elif_Statement       : 66
Else_Statement       : 67
Expression           : 4 59
For_Loop             : 7 62
For_Loop_Crement     : 77 79
IDENTIFIER_ALL       : 10 90
IDENTIFIER_ALL_ASSIGN : 76 78
IDENTIFIER_ARRAY     : 37 39
IDENTIFIER_ASSIGN    : 36
IDENTIFIER_ID        : 28 49 50 52 53 80
INC_DEC_OPRERATOR    : 52 53 81 82
If_Statement         : 5 60
Input                : 1
MULTI_ASSIGN         : 19 20
MinusVariable        : 26
OperationConstant    : 16 23 30 30 31 31 32 32 33 33 34 34 35 49 68 68 76 77 78 79 80
OperationStatement   : 24 29
OperationStatementInBracket : 25
OperationVarDeclare  : 35
Print_Console        : 9 64
Print_Value          : 85 87 90 91 92
STRING_ASSIGN        : 13
While_Loop           : 6 61
empty                : 2 21 51 57 57 65 88 88 89 89 89
line                 : 1 0
statements           : 54 55 56 58 59 60 61 62 63 64 75 76 77 78 79 83

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (3) Input -> . Declaration
    (4) Input -> . Expression
    (5) Input -> . If_Statement
    (6) Input -> . While_Loop
    (7) Input -> . For_Loop
    (8) Input -> . Do_While_Loop
    (9) Input -> . Print_Console
    (94) EXIT -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    $end            reduce using rule 94 (EXIT -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    line                           shift and go to state 1
    Input                          shift and go to state 2
    EXIT                           shift and go to state 3
    Declaration                    shift and go to state 4
    Expression                     shift and go to state 5
    If_Statement                   shift and go to state 6
    While_Loop                     shift and go to state 7
    For_Loop                       shift and go to state 8
    Do_While_Loop                  shift and go to state 9
    Print_Console                  shift and go to state 10
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 1

    (0) S' -> line .



state 2

    (1) line -> Input . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (3) Input -> . Declaration
    (4) Input -> . Expression
    (5) Input -> . If_Statement
    (6) Input -> . While_Loop
    (7) Input -> . For_Loop
    (8) Input -> . Do_While_Loop
    (9) Input -> . Print_Console
    (94) EXIT -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    $end            reduce using rule 94 (EXIT -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    Input                          shift and go to state 2
    line                           shift and go to state 28
    EXIT                           shift and go to state 3
    Declaration                    shift and go to state 4
    Expression                     shift and go to state 5
    If_Statement                   shift and go to state 6
    While_Loop                     shift and go to state 7
    For_Loop                       shift and go to state 8
    Do_While_Loop                  shift and go to state 9
    Print_Console                  shift and go to state 10
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 3

    (2) line -> EXIT . empty
    (93) empty -> .

    $end            reduce using rule 93 (empty -> .)

    empty                          shift and go to state 29

state 4

    (3) Input -> Declaration .

    STRING          reduce using rule 3 (Input -> Declaration .)
    IF              reduce using rule 3 (Input -> Declaration .)
    WHILE           reduce using rule 3 (Input -> Declaration .)
    FOR             reduce using rule 3 (Input -> Declaration .)
    DO              reduce using rule 3 (Input -> Declaration .)
    PRINT           reduce using rule 3 (Input -> Declaration .)
    PRINT_LN        reduce using rule 3 (Input -> Declaration .)
    INT             reduce using rule 3 (Input -> Declaration .)
    INT16           reduce using rule 3 (Input -> Declaration .)
    IDENTIFIER      reduce using rule 3 (Input -> Declaration .)
    INC_OP          reduce using rule 3 (Input -> Declaration .)
    DEC_OP          reduce using rule 3 (Input -> Declaration .)
    $end            reduce using rule 3 (Input -> Declaration .)


state 5

    (4) Input -> Expression .

    STRING          reduce using rule 4 (Input -> Expression .)
    IF              reduce using rule 4 (Input -> Expression .)
    WHILE           reduce using rule 4 (Input -> Expression .)
    FOR             reduce using rule 4 (Input -> Expression .)
    DO              reduce using rule 4 (Input -> Expression .)
    PRINT           reduce using rule 4 (Input -> Expression .)
    PRINT_LN        reduce using rule 4 (Input -> Expression .)
    INT             reduce using rule 4 (Input -> Expression .)
    INT16           reduce using rule 4 (Input -> Expression .)
    IDENTIFIER      reduce using rule 4 (Input -> Expression .)
    INC_OP          reduce using rule 4 (Input -> Expression .)
    DEC_OP          reduce using rule 4 (Input -> Expression .)
    $end            reduce using rule 4 (Input -> Expression .)


state 6

    (5) Input -> If_Statement .

    STRING          reduce using rule 5 (Input -> If_Statement .)
    IF              reduce using rule 5 (Input -> If_Statement .)
    WHILE           reduce using rule 5 (Input -> If_Statement .)
    FOR             reduce using rule 5 (Input -> If_Statement .)
    DO              reduce using rule 5 (Input -> If_Statement .)
    PRINT           reduce using rule 5 (Input -> If_Statement .)
    PRINT_LN        reduce using rule 5 (Input -> If_Statement .)
    INT             reduce using rule 5 (Input -> If_Statement .)
    INT16           reduce using rule 5 (Input -> If_Statement .)
    IDENTIFIER      reduce using rule 5 (Input -> If_Statement .)
    INC_OP          reduce using rule 5 (Input -> If_Statement .)
    DEC_OP          reduce using rule 5 (Input -> If_Statement .)
    $end            reduce using rule 5 (Input -> If_Statement .)


state 7

    (6) Input -> While_Loop .

    STRING          reduce using rule 6 (Input -> While_Loop .)
    IF              reduce using rule 6 (Input -> While_Loop .)
    WHILE           reduce using rule 6 (Input -> While_Loop .)
    FOR             reduce using rule 6 (Input -> While_Loop .)
    DO              reduce using rule 6 (Input -> While_Loop .)
    PRINT           reduce using rule 6 (Input -> While_Loop .)
    PRINT_LN        reduce using rule 6 (Input -> While_Loop .)
    INT             reduce using rule 6 (Input -> While_Loop .)
    INT16           reduce using rule 6 (Input -> While_Loop .)
    IDENTIFIER      reduce using rule 6 (Input -> While_Loop .)
    INC_OP          reduce using rule 6 (Input -> While_Loop .)
    DEC_OP          reduce using rule 6 (Input -> While_Loop .)
    $end            reduce using rule 6 (Input -> While_Loop .)


state 8

    (7) Input -> For_Loop .

    STRING          reduce using rule 7 (Input -> For_Loop .)
    IF              reduce using rule 7 (Input -> For_Loop .)
    WHILE           reduce using rule 7 (Input -> For_Loop .)
    FOR             reduce using rule 7 (Input -> For_Loop .)
    DO              reduce using rule 7 (Input -> For_Loop .)
    PRINT           reduce using rule 7 (Input -> For_Loop .)
    PRINT_LN        reduce using rule 7 (Input -> For_Loop .)
    INT             reduce using rule 7 (Input -> For_Loop .)
    INT16           reduce using rule 7 (Input -> For_Loop .)
    IDENTIFIER      reduce using rule 7 (Input -> For_Loop .)
    INC_OP          reduce using rule 7 (Input -> For_Loop .)
    DEC_OP          reduce using rule 7 (Input -> For_Loop .)
    $end            reduce using rule 7 (Input -> For_Loop .)


state 9

    (8) Input -> Do_While_Loop .

    STRING          reduce using rule 8 (Input -> Do_While_Loop .)
    IF              reduce using rule 8 (Input -> Do_While_Loop .)
    WHILE           reduce using rule 8 (Input -> Do_While_Loop .)
    FOR             reduce using rule 8 (Input -> Do_While_Loop .)
    DO              reduce using rule 8 (Input -> Do_While_Loop .)
    PRINT           reduce using rule 8 (Input -> Do_While_Loop .)
    PRINT_LN        reduce using rule 8 (Input -> Do_While_Loop .)
    INT             reduce using rule 8 (Input -> Do_While_Loop .)
    INT16           reduce using rule 8 (Input -> Do_While_Loop .)
    IDENTIFIER      reduce using rule 8 (Input -> Do_While_Loop .)
    INC_OP          reduce using rule 8 (Input -> Do_While_Loop .)
    DEC_OP          reduce using rule 8 (Input -> Do_While_Loop .)
    $end            reduce using rule 8 (Input -> Do_While_Loop .)


state 10

    (9) Input -> Print_Console .

    STRING          reduce using rule 9 (Input -> Print_Console .)
    IF              reduce using rule 9 (Input -> Print_Console .)
    WHILE           reduce using rule 9 (Input -> Print_Console .)
    FOR             reduce using rule 9 (Input -> Print_Console .)
    DO              reduce using rule 9 (Input -> Print_Console .)
    PRINT           reduce using rule 9 (Input -> Print_Console .)
    PRINT_LN        reduce using rule 9 (Input -> Print_Console .)
    INT             reduce using rule 9 (Input -> Print_Console .)
    INT16           reduce using rule 9 (Input -> Print_Console .)
    IDENTIFIER      reduce using rule 9 (Input -> Print_Console .)
    INC_OP          reduce using rule 9 (Input -> Print_Console .)
    DEC_OP          reduce using rule 9 (Input -> Print_Console .)
    $end            reduce using rule 9 (Input -> Print_Console .)


state 11

    (10) Declaration -> DeclarationTypeNumber . IDENTIFIER_ALL ;
    (11) Declaration -> DeclarationTypeNumber . ARRAY_MULTI_ASSIGN ;
    (36) IDENTIFIER_ALL -> . IDENTIFIER_ASSIGN
    (37) IDENTIFIER_ALL -> . IDENTIFIER_ARRAY
    (38) IDENTIFIER_ALL -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (16) IDENTIFIER_ASSIGN -> . IDENTIFIER = OperationConstant
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 34

    IDENTIFIER_ALL                 shift and go to state 30
    ARRAY_MULTI_ASSIGN             shift and go to state 31
    IDENTIFIER_ASSIGN              shift and go to state 32
    IDENTIFIER_ARRAY               shift and go to state 33

state 12

    (51) Expression -> ARRAY_MULTI_ASSIGN . empty ;
    (93) empty -> .

    ;               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 35

state 13

    (12) Declaration -> STRING . IDENTIFIER ;
    (13) Declaration -> STRING . STRING_ASSIGN ;
    (17) STRING_ASSIGN -> . IDENTIFIER = DQ_MSG

    IDENTIFIER      shift and go to state 36

    STRING_ASSIGN                  shift and go to state 37

state 14

    (40) IDENTIFIER_ID -> IDENTIFIER .
    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER . [ ] = { MULTI_ASSIGN }
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    =               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    INC_OP          reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    DEC_OP          reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 38


state 15

    (49) Expression -> IDENTIFIER_ID . = OperationConstant ;
    (50) Expression -> IDENTIFIER_ID . = DQ_MSG ;
    (52) Expression -> IDENTIFIER_ID . INC_DEC_OPRERATOR ;
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP

    =               shift and go to state 39
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    INC_DEC_OPRERATOR              shift and go to state 40

state 16

    (53) Expression -> INC_DEC_OPRERATOR . IDENTIFIER_ID ;
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 42

    IDENTIFIER_ID                  shift and go to state 41
    IDENTIFIER_ARRAY               shift and go to state 25

state 17

    (54) If_Statement -> IF . ( Compare_Expreession ) { statements } Elif_Else

    (               shift and go to state 43


state 18

    (75) While_Loop -> WHILE . ( Compare_Expreession ) { statements }

    (               shift and go to state 44


state 19

    (76) For_Loop -> FOR . ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR . ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> FOR . ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR . ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    (               shift and go to state 45


state 20

    (83) Do_While_Loop -> DO . { statements } WHILE ( Compare_Expreession ) ;

    {               shift and go to state 46


state 21

    (84) Print_Console -> PRINT . ( DQ_MSG ) ;
    (85) Print_Console -> PRINT . ( DQ_MSG Print_Value ) ;

    (               shift and go to state 47


state 22

    (86) Print_Console -> PRINT_LN . ( DQ_MSG ) ;
    (87) Print_Console -> PRINT_LN . ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> PRINT_LN . ( empty empty ) ;

    (               shift and go to state 48


state 23

    (14) DeclarationTypeNumber -> INT .

    IDENTIFIER      reduce using rule 14 (DeclarationTypeNumber -> INT .)


state 24

    (15) DeclarationTypeNumber -> INT16 .

    IDENTIFIER      reduce using rule 15 (DeclarationTypeNumber -> INT16 .)


state 25

    (39) IDENTIFIER_ID -> IDENTIFIER_ARRAY .

    =               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    INC_OP          reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    DEC_OP          reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ;               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    +               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    -               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    *               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    /               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    %               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ]               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    L_OP            reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    G_OP            reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    LE_OP           reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    GE_OP           reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    EQ_OP           reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    NE_OP           reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ,               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    )               reduce using rule 39 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)


state 26

    (45) INC_DEC_OPRERATOR -> INC_OP .

    IDENTIFIER      reduce using rule 45 (INC_DEC_OPRERATOR -> INC_OP .)
    ;               reduce using rule 45 (INC_DEC_OPRERATOR -> INC_OP .)
    )               reduce using rule 45 (INC_DEC_OPRERATOR -> INC_OP .)


state 27

    (46) INC_DEC_OPRERATOR -> DEC_OP .

    IDENTIFIER      reduce using rule 46 (INC_DEC_OPRERATOR -> DEC_OP .)
    ;               reduce using rule 46 (INC_DEC_OPRERATOR -> DEC_OP .)
    )               reduce using rule 46 (INC_DEC_OPRERATOR -> DEC_OP .)


state 28

    (1) line -> Input line .

    $end            reduce using rule 1 (line -> Input line .)


state 29

    (2) line -> EXIT empty .

    $end            reduce using rule 2 (line -> EXIT empty .)


state 30

    (10) Declaration -> DeclarationTypeNumber IDENTIFIER_ALL . ;

    ;               shift and go to state 49


state 31

    (11) Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN . ;

    ;               shift and go to state 50


state 32

    (36) IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .

    ;               reduce using rule 36 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)
    ,               reduce using rule 36 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)
    )               reduce using rule 36 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)


state 33

    (37) IDENTIFIER_ALL -> IDENTIFIER_ARRAY .

    ;               reduce using rule 37 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)
    ,               reduce using rule 37 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)
    )               reduce using rule 37 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)


state 34

    (38) IDENTIFIER_ALL -> IDENTIFIER .
    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER . [ ] = { MULTI_ASSIGN }
    (16) IDENTIFIER_ASSIGN -> IDENTIFIER . = OperationConstant
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ;               reduce using rule 38 (IDENTIFIER_ALL -> IDENTIFIER .)
    [               shift and go to state 38
    =               shift and go to state 51


state 35

    (51) Expression -> ARRAY_MULTI_ASSIGN empty . ;

    ;               shift and go to state 52


state 36

    (12) Declaration -> STRING IDENTIFIER . ;
    (17) STRING_ASSIGN -> IDENTIFIER . = DQ_MSG

    ;               shift and go to state 53
    =               shift and go to state 54


state 37

    (13) Declaration -> STRING STRING_ASSIGN . ;

    ;               shift and go to state 55


state 38

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ . ] = { MULTI_ASSIGN }
    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ . ARRAY_SIZE ]
    (22) ARRAY_SIZE -> . IDENTIFIER
    (23) ARRAY_SIZE -> . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    ]               shift and go to state 57
    IDENTIFIER      shift and go to state 56
    (               shift and go to state 67
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    ARRAY_SIZE                     shift and go to state 58
    OperationConstant              shift and go to state 59
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 39

    (49) Expression -> IDENTIFIER_ID = . OperationConstant ;
    (50) Expression -> IDENTIFIER_ID = . DQ_MSG ;
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    DQ_MSG          shift and go to state 73
    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    IDENTIFIER_ID                  shift and go to state 64
    OperationConstant              shift and go to state 72
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 40

    (52) Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR . ;

    ;               shift and go to state 75


state 41

    (53) Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID . ;

    ;               shift and go to state 76


state 42

    (40) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ;               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 77


state 43

    (54) If_Statement -> IF ( . Compare_Expreession ) { statements } Elif_Else
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    Compare_Expreession            shift and go to state 78
    OperationConstant              shift and go to state 79
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 44

    (75) While_Loop -> WHILE ( . Compare_Expreession ) { statements }
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    Compare_Expreession            shift and go to state 80
    OperationConstant              shift and go to state 79
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 45

    (76) For_Loop -> FOR ( . DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( . DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> FOR ( . IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( . IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16

    IDENTIFIER      shift and go to state 82
    INT             shift and go to state 23
    INT16           shift and go to state 24

    DeclarationTypeNumber          shift and go to state 81

state 46

    (83) Do_While_Loop -> DO { . statements } WHILE ( Compare_Expreession ) ;
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 83
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 47

    (84) Print_Console -> PRINT ( . DQ_MSG ) ;
    (85) Print_Console -> PRINT ( . DQ_MSG Print_Value ) ;

    DQ_MSG          shift and go to state 92


state 48

    (86) Print_Console -> PRINT_LN ( . DQ_MSG ) ;
    (87) Print_Console -> PRINT_LN ( . DQ_MSG Print_Value ) ;
    (88) Print_Console -> PRINT_LN ( . empty empty ) ;
    (93) empty -> .

    DQ_MSG          shift and go to state 93
    )               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 94

state 49

    (10) Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .

    STRING          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    IF              reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    WHILE           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    FOR             reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    DO              reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    PRINT           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    PRINT_LN        reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INT             reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INT16           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    IDENTIFIER      reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INC_OP          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    DEC_OP          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    $end            reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    }               reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)


state 50

    (11) Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .

    STRING          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    IF              reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    WHILE           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    FOR             reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    DO              reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    PRINT           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    PRINT_LN        reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INT             reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INT16           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    IDENTIFIER      reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INC_OP          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    DEC_OP          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    $end            reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    }               reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)


state 51

    (16) IDENTIFIER_ASSIGN -> IDENTIFIER = . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 95
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 52

    (51) Expression -> ARRAY_MULTI_ASSIGN empty ; .

    STRING          reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    IF              reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    WHILE           reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    FOR             reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    DO              reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    PRINT           reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    PRINT_LN        reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INT             reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INT16           reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    IDENTIFIER      reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INC_OP          reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    DEC_OP          reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    $end            reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    }               reduce using rule 51 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)


state 53

    (12) Declaration -> STRING IDENTIFIER ; .

    STRING          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    IF              reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    WHILE           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    FOR             reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    DO              reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    PRINT           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    PRINT_LN        reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INT             reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INT16           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INC_OP          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    DEC_OP          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    $end            reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    }               reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)


state 54

    (17) STRING_ASSIGN -> IDENTIFIER = . DQ_MSG

    DQ_MSG          shift and go to state 96


state 55

    (13) Declaration -> STRING STRING_ASSIGN ; .

    STRING          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    IF              reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    WHILE           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    FOR             reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    DO              reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    PRINT           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    PRINT_LN        reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INT             reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INT16           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    IDENTIFIER      reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INC_OP          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    DEC_OP          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    $end            reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    }               reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)


state 56

    (22) ARRAY_SIZE -> IDENTIFIER .
    (42) CONSTANT_ALL -> IDENTIFIER .
    (40) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

  ! reduce/reduce conflict for ] resolved using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
  ! reduce/reduce conflict for + resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for - resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for * resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for / resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for % resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ] resolved using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
    ]               reduce using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
    +               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    -               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    *               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    /               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    %               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 77

  ! +               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! -               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! *               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! /               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! %               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .) ]


state 57

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] . = { MULTI_ASSIGN }

    =               shift and go to state 97


state 58

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE . ]

    ]               shift and go to state 98


state 59

    (23) ARRAY_SIZE -> OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    ]               reduce using rule 23 (ARRAY_SIZE -> OperationConstant .)
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 60

    (24) OperationConstant -> OperationStatement .

    +               reduce using rule 24 (OperationConstant -> OperationStatement .)
    -               reduce using rule 24 (OperationConstant -> OperationStatement .)
    *               reduce using rule 24 (OperationConstant -> OperationStatement .)
    /               reduce using rule 24 (OperationConstant -> OperationStatement .)
    %               reduce using rule 24 (OperationConstant -> OperationStatement .)
    ]               reduce using rule 24 (OperationConstant -> OperationStatement .)
    ;               reduce using rule 24 (OperationConstant -> OperationStatement .)
    L_OP            reduce using rule 24 (OperationConstant -> OperationStatement .)
    G_OP            reduce using rule 24 (OperationConstant -> OperationStatement .)
    LE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    GE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    EQ_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    NE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    ,               reduce using rule 24 (OperationConstant -> OperationStatement .)
    )               reduce using rule 24 (OperationConstant -> OperationStatement .)


state 61

    (25) OperationConstant -> OperationStatementInBracket .

    +               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    -               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    *               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    /               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    %               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ]               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ;               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    L_OP            reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    G_OP            reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    LE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    GE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    EQ_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    NE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ,               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    )               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)


state 62

    (26) OperationConstant -> MinusVariable .

    +               reduce using rule 26 (OperationConstant -> MinusVariable .)
    -               reduce using rule 26 (OperationConstant -> MinusVariable .)
    *               reduce using rule 26 (OperationConstant -> MinusVariable .)
    /               reduce using rule 26 (OperationConstant -> MinusVariable .)
    %               reduce using rule 26 (OperationConstant -> MinusVariable .)
    ]               reduce using rule 26 (OperationConstant -> MinusVariable .)
    ;               reduce using rule 26 (OperationConstant -> MinusVariable .)
    L_OP            reduce using rule 26 (OperationConstant -> MinusVariable .)
    G_OP            reduce using rule 26 (OperationConstant -> MinusVariable .)
    LE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    GE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    EQ_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    NE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    ,               reduce using rule 26 (OperationConstant -> MinusVariable .)
    )               reduce using rule 26 (OperationConstant -> MinusVariable .)


state 63

    (27) OperationConstant -> CONSTANT_ALL .

    +               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    -               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    *               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    /               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    %               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ]               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ;               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    L_OP            reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    G_OP            reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    LE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    GE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    EQ_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    NE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ,               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    )               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)


state 64

    (28) OperationConstant -> IDENTIFIER_ID .

    +               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    -               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    *               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    /               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    %               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ]               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ;               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    L_OP            reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    G_OP            reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    LE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    GE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    EQ_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    NE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ,               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    )               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)


state 65

    (47) OperationVarDeclare -> + .

    (               reduce using rule 47 (OperationVarDeclare -> + .)
    IDENTIFIER      reduce using rule 47 (OperationVarDeclare -> + .)
    +               reduce using rule 47 (OperationVarDeclare -> + .)
    -               reduce using rule 47 (OperationVarDeclare -> + .)
    CONSTANT10      reduce using rule 47 (OperationVarDeclare -> + .)
    CONSTANT16      reduce using rule 47 (OperationVarDeclare -> + .)


state 66

    (48) OperationVarDeclare -> - .

    (               reduce using rule 48 (OperationVarDeclare -> - .)
    IDENTIFIER      reduce using rule 48 (OperationVarDeclare -> - .)
    +               reduce using rule 48 (OperationVarDeclare -> - .)
    -               reduce using rule 48 (OperationVarDeclare -> - .)
    CONSTANT10      reduce using rule 48 (OperationVarDeclare -> - .)
    CONSTANT16      reduce using rule 48 (OperationVarDeclare -> - .)


state 67

    (29) OperationStatementInBracket -> ( . OperationStatement )
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationStatement             shift and go to state 104
    OperationConstant              shift and go to state 105
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 68

    (35) MinusVariable -> OperationVarDeclare . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationVarDeclare            shift and go to state 68
    OperationConstant              shift and go to state 106
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 69

    (41) CONSTANT_ALL -> CONSTANT .

    +               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    -               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    *               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    /               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    %               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    ]               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    ;               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    L_OP            reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    G_OP            reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    LE_OP           reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    GE_OP           reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    EQ_OP           reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    NE_OP           reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    ,               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)
    )               reduce using rule 41 (CONSTANT_ALL -> CONSTANT .)


state 70

    (43) CONSTANT -> CONSTANT10 .

    +               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    -               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    *               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    /               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    %               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    ]               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    ;               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    L_OP            reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    G_OP            reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    LE_OP           reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    GE_OP           reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    EQ_OP           reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    NE_OP           reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    ,               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    )               reduce using rule 43 (CONSTANT -> CONSTANT10 .)
    }               reduce using rule 43 (CONSTANT -> CONSTANT10 .)


state 71

    (44) CONSTANT -> CONSTANT16 .

    +               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    -               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    *               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    /               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    %               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    ]               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    ;               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    L_OP            reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    G_OP            reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    LE_OP           reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    GE_OP           reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    EQ_OP           reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    NE_OP           reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    ,               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    )               reduce using rule 44 (CONSTANT -> CONSTANT16 .)
    }               reduce using rule 44 (CONSTANT -> CONSTANT16 .)


state 72

    (49) Expression -> IDENTIFIER_ID = OperationConstant . ;
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    ;               shift and go to state 107
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 73

    (50) Expression -> IDENTIFIER_ID = DQ_MSG . ;

    ;               shift and go to state 108


state 74

    (42) CONSTANT_ALL -> IDENTIFIER .
    (40) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

  ! reduce/reduce conflict for ; resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for + resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for - resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for * resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for / resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for % resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for L_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for G_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for LE_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for GE_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for NE_OP resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for , resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ) resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ] resolved using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    ;               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    +               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    -               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    *               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    /               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    %               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    L_OP            reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    G_OP            reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    LE_OP           reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    GE_OP           reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    EQ_OP           reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    NE_OP           reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    ,               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    )               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    ]               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 77

  ! ;               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! +               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! -               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! *               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! /               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! %               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! L_OP            [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! G_OP            [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! LE_OP           [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! GE_OP           [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! EQ_OP           [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! NE_OP           [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ,               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! )               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 42 (CONSTANT_ALL -> IDENTIFIER .) ]


state 75

    (52) Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .

    STRING          reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    IF              reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    WHILE           reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    FOR             reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    DO              reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    PRINT           reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    PRINT_LN        reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INT             reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INT16           reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    IDENTIFIER      reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INC_OP          reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    DEC_OP          reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    $end            reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    }               reduce using rule 52 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)


state 76

    (53) Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .

    STRING          reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    IF              reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    WHILE           reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    FOR             reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    DO              reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    PRINT           reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    PRINT_LN        reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INT             reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INT16           reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    IDENTIFIER      reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INC_OP          reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    DEC_OP          reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    $end            reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    }               reduce using rule 53 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)


state 77

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ . ARRAY_SIZE ]
    (22) ARRAY_SIZE -> . IDENTIFIER
    (23) ARRAY_SIZE -> . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 56
    (               shift and go to state 67
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    ARRAY_SIZE                     shift and go to state 58
    OperationConstant              shift and go to state 59
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 78

    (54) If_Statement -> IF ( Compare_Expreession . ) { statements } Elif_Else

    )               shift and go to state 109


state 79

    (68) Compare_Expreession -> OperationConstant . Compare_Operator OperationConstant
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant
    (69) Compare_Operator -> . L_OP
    (70) Compare_Operator -> . G_OP
    (71) Compare_Operator -> . LE_OP
    (72) Compare_Operator -> . GE_OP
    (73) Compare_Operator -> . EQ_OP
    (74) Compare_Operator -> . NE_OP

    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103
    L_OP            shift and go to state 111
    G_OP            shift and go to state 112
    LE_OP           shift and go to state 113
    GE_OP           shift and go to state 114
    EQ_OP           shift and go to state 115
    NE_OP           shift and go to state 116

    Compare_Operator               shift and go to state 110

state 80

    (75) While_Loop -> WHILE ( Compare_Expreession . ) { statements }

    )               shift and go to state 117


state 81

    (76) For_Loop -> FOR ( DeclarationTypeNumber . IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber . IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    IDENTIFIER      shift and go to state 118


state 82

    (78) For_Loop -> FOR ( IDENTIFIER . = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER . = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    =               shift and go to state 119


state 83

    (83) Do_While_Loop -> DO { statements . } WHILE ( Compare_Expreession ) ;

    }               shift and go to state 120


state 84

    (57) statements -> empty . empty
    (93) empty -> .

    }               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 121

state 85

    (58) statements -> Declaration . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    Declaration                    shift and go to state 85
    statements                     shift and go to state 122
    empty                          shift and go to state 84
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 86

    (59) statements -> Expression . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    Expression                     shift and go to state 86
    statements                     shift and go to state 123
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 87

    (60) statements -> If_Statement . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    If_Statement                   shift and go to state 87
    statements                     shift and go to state 124
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 88

    (61) statements -> While_Loop . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    While_Loop                     shift and go to state 88
    statements                     shift and go to state 125
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 89

    (62) statements -> For_Loop . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    For_Loop                       shift and go to state 89
    statements                     shift and go to state 126
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 90

    (63) statements -> Do_While_Loop . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    Do_While_Loop                  shift and go to state 90
    statements                     shift and go to state 127
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 91

    (64) statements -> Print_Console . statements
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    Print_Console                  shift and go to state 91
    statements                     shift and go to state 128
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 92

    (84) Print_Console -> PRINT ( DQ_MSG . ) ;
    (85) Print_Console -> PRINT ( DQ_MSG . Print_Value ) ;
    (89) Print_Value -> . empty empty empty
    (90) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (91) Print_Value -> . , CONSTANT Print_Value
    (92) Print_Value -> . , DQ_MSG Print_Value
    (93) empty -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 129
    ,               shift and go to state 132

  ! )               [ reduce using rule 93 (empty -> .) ]

    Print_Value                    shift and go to state 130
    empty                          shift and go to state 131

state 93

    (86) Print_Console -> PRINT_LN ( DQ_MSG . ) ;
    (87) Print_Console -> PRINT_LN ( DQ_MSG . Print_Value ) ;
    (89) Print_Value -> . empty empty empty
    (90) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (91) Print_Value -> . , CONSTANT Print_Value
    (92) Print_Value -> . , DQ_MSG Print_Value
    (93) empty -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 133
    ,               shift and go to state 132

  ! )               [ reduce using rule 93 (empty -> .) ]

    Print_Value                    shift and go to state 134
    empty                          shift and go to state 131

state 94

    (88) Print_Console -> PRINT_LN ( empty . empty ) ;
    (93) empty -> .

    )               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 135

state 95

    (16) IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    ;               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    ,               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    )               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 96

    (17) STRING_ASSIGN -> IDENTIFIER = DQ_MSG .

    ;               reduce using rule 17 (STRING_ASSIGN -> IDENTIFIER = DQ_MSG .)


state 97

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = . { MULTI_ASSIGN }

    {               shift and go to state 136


state 98

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .

    =               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    INC_OP          reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    DEC_OP          reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ;               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    +               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    -               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    *               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    /               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    %               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ]               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    L_OP            reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    G_OP            reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    LE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    GE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    EQ_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    NE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ,               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    )               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)


state 99

    (30) OperationStatement -> OperationConstant + . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 137
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 100

    (31) OperationStatement -> OperationConstant - . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 138
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 101

    (32) OperationStatement -> OperationConstant * . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 139
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 102

    (33) OperationStatement -> OperationConstant / . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 140
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 103

    (34) OperationStatement -> OperationConstant % . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 141
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 104

    (29) OperationStatementInBracket -> ( OperationStatement . )
    (24) OperationConstant -> OperationStatement .

    )               shift and go to state 142
    +               reduce using rule 24 (OperationConstant -> OperationStatement .)
    -               reduce using rule 24 (OperationConstant -> OperationStatement .)
    *               reduce using rule 24 (OperationConstant -> OperationStatement .)
    /               reduce using rule 24 (OperationConstant -> OperationStatement .)
    %               reduce using rule 24 (OperationConstant -> OperationStatement .)


state 105

    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 106

    (35) MinusVariable -> OperationVarDeclare OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    ]               reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    ;               reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    L_OP            reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    G_OP            reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    LE_OP           reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    GE_OP           reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    EQ_OP           reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    NE_OP           reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    ,               reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    )               reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .)
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103

  ! +               [ reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! -               [ reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! *               [ reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! /               [ reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! %               [ reduce using rule 35 (MinusVariable -> OperationVarDeclare OperationConstant .) ]


state 107

    (49) Expression -> IDENTIFIER_ID = OperationConstant ; .

    STRING          reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    IF              reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    WHILE           reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    FOR             reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    DO              reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    PRINT           reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    PRINT_LN        reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INT             reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INT16           reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    IDENTIFIER      reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INC_OP          reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    DEC_OP          reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    $end            reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    }               reduce using rule 49 (Expression -> IDENTIFIER_ID = OperationConstant ; .)


state 108

    (50) Expression -> IDENTIFIER_ID = DQ_MSG ; .

    STRING          reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    IF              reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    WHILE           reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    FOR             reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    DO              reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    PRINT           reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    PRINT_LN        reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INT             reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INT16           reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    IDENTIFIER      reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INC_OP          reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    DEC_OP          reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    $end            reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    }               reduce using rule 50 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)


state 109

    (54) If_Statement -> IF ( Compare_Expreession ) . { statements } Elif_Else

    {               shift and go to state 143


state 110

    (68) Compare_Expreession -> OperationConstant Compare_Operator . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 144
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 111

    (69) Compare_Operator -> L_OP .

    (               reduce using rule 69 (Compare_Operator -> L_OP .)
    IDENTIFIER      reduce using rule 69 (Compare_Operator -> L_OP .)
    +               reduce using rule 69 (Compare_Operator -> L_OP .)
    -               reduce using rule 69 (Compare_Operator -> L_OP .)
    CONSTANT10      reduce using rule 69 (Compare_Operator -> L_OP .)
    CONSTANT16      reduce using rule 69 (Compare_Operator -> L_OP .)


state 112

    (70) Compare_Operator -> G_OP .

    (               reduce using rule 70 (Compare_Operator -> G_OP .)
    IDENTIFIER      reduce using rule 70 (Compare_Operator -> G_OP .)
    +               reduce using rule 70 (Compare_Operator -> G_OP .)
    -               reduce using rule 70 (Compare_Operator -> G_OP .)
    CONSTANT10      reduce using rule 70 (Compare_Operator -> G_OP .)
    CONSTANT16      reduce using rule 70 (Compare_Operator -> G_OP .)


state 113

    (71) Compare_Operator -> LE_OP .

    (               reduce using rule 71 (Compare_Operator -> LE_OP .)
    IDENTIFIER      reduce using rule 71 (Compare_Operator -> LE_OP .)
    +               reduce using rule 71 (Compare_Operator -> LE_OP .)
    -               reduce using rule 71 (Compare_Operator -> LE_OP .)
    CONSTANT10      reduce using rule 71 (Compare_Operator -> LE_OP .)
    CONSTANT16      reduce using rule 71 (Compare_Operator -> LE_OP .)


state 114

    (72) Compare_Operator -> GE_OP .

    (               reduce using rule 72 (Compare_Operator -> GE_OP .)
    IDENTIFIER      reduce using rule 72 (Compare_Operator -> GE_OP .)
    +               reduce using rule 72 (Compare_Operator -> GE_OP .)
    -               reduce using rule 72 (Compare_Operator -> GE_OP .)
    CONSTANT10      reduce using rule 72 (Compare_Operator -> GE_OP .)
    CONSTANT16      reduce using rule 72 (Compare_Operator -> GE_OP .)


state 115

    (73) Compare_Operator -> EQ_OP .

    (               reduce using rule 73 (Compare_Operator -> EQ_OP .)
    IDENTIFIER      reduce using rule 73 (Compare_Operator -> EQ_OP .)
    +               reduce using rule 73 (Compare_Operator -> EQ_OP .)
    -               reduce using rule 73 (Compare_Operator -> EQ_OP .)
    CONSTANT10      reduce using rule 73 (Compare_Operator -> EQ_OP .)
    CONSTANT16      reduce using rule 73 (Compare_Operator -> EQ_OP .)


state 116

    (74) Compare_Operator -> NE_OP .

    (               reduce using rule 74 (Compare_Operator -> NE_OP .)
    IDENTIFIER      reduce using rule 74 (Compare_Operator -> NE_OP .)
    +               reduce using rule 74 (Compare_Operator -> NE_OP .)
    -               reduce using rule 74 (Compare_Operator -> NE_OP .)
    CONSTANT10      reduce using rule 74 (Compare_Operator -> NE_OP .)
    CONSTANT16      reduce using rule 74 (Compare_Operator -> NE_OP .)


state 117

    (75) While_Loop -> WHILE ( Compare_Expreession ) . { statements }

    {               shift and go to state 145


state 118

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER . = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER . = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    =               shift and go to state 146


state 119

    (78) For_Loop -> FOR ( IDENTIFIER = . OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER = . OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 147
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 120

    (83) Do_While_Loop -> DO { statements } . WHILE ( Compare_Expreession ) ;

    WHILE           shift and go to state 148


state 121

    (57) statements -> empty empty .

    }               reduce using rule 57 (statements -> empty empty .)


state 122

    (58) statements -> Declaration statements .

    }               reduce using rule 58 (statements -> Declaration statements .)


state 123

    (59) statements -> Expression statements .

    }               reduce using rule 59 (statements -> Expression statements .)


state 124

    (60) statements -> If_Statement statements .

    }               reduce using rule 60 (statements -> If_Statement statements .)


state 125

    (61) statements -> While_Loop statements .

    }               reduce using rule 61 (statements -> While_Loop statements .)


state 126

    (62) statements -> For_Loop statements .

    }               reduce using rule 62 (statements -> For_Loop statements .)


state 127

    (63) statements -> Do_While_Loop statements .

    }               reduce using rule 63 (statements -> Do_While_Loop statements .)


state 128

    (64) statements -> Print_Console statements .

    }               reduce using rule 64 (statements -> Print_Console statements .)


state 129

    (84) Print_Console -> PRINT ( DQ_MSG ) . ;

    ;               shift and go to state 149


state 130

    (85) Print_Console -> PRINT ( DQ_MSG Print_Value . ) ;

    )               shift and go to state 150


state 131

    (89) Print_Value -> empty . empty empty
    (93) empty -> .

    )               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 151

state 132

    (90) Print_Value -> , . IDENTIFIER_ALL Print_Value
    (91) Print_Value -> , . CONSTANT Print_Value
    (92) Print_Value -> , . DQ_MSG Print_Value
    (36) IDENTIFIER_ALL -> . IDENTIFIER_ASSIGN
    (37) IDENTIFIER_ALL -> . IDENTIFIER_ARRAY
    (38) IDENTIFIER_ALL -> . IDENTIFIER
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (16) IDENTIFIER_ASSIGN -> . IDENTIFIER = OperationConstant
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    DQ_MSG          shift and go to state 154
    IDENTIFIER      shift and go to state 155
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    IDENTIFIER_ALL                 shift and go to state 152
    CONSTANT                       shift and go to state 153
    IDENTIFIER_ASSIGN              shift and go to state 32
    IDENTIFIER_ARRAY               shift and go to state 33

state 133

    (86) Print_Console -> PRINT_LN ( DQ_MSG ) . ;

    ;               shift and go to state 156


state 134

    (87) Print_Console -> PRINT_LN ( DQ_MSG Print_Value . ) ;

    )               shift and go to state 157


state 135

    (88) Print_Console -> PRINT_LN ( empty empty . ) ;

    )               shift and go to state 158


state 136

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { . MULTI_ASSIGN }
    (20) MULTI_ASSIGN -> . CONSTANT , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> . CONSTANT empty
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16

    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    MULTI_ASSIGN                   shift and go to state 159
    CONSTANT                       shift and go to state 160

state 137

    (30) OperationStatement -> OperationConstant + OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    -               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    ]               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    ;               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    L_OP            reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    G_OP            reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    LE_OP           reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    GE_OP           reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    EQ_OP           reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    NE_OP           reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    ,               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    )               reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .)
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103

  ! *               [ reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .) ]
  ! /               [ reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .) ]
  ! %               [ reduce using rule 30 (OperationStatement -> OperationConstant + OperationConstant .) ]
  ! +               [ shift and go to state 99 ]
  ! -               [ shift and go to state 100 ]


state 138

    (31) OperationStatement -> OperationConstant - OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    -               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    ]               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    ;               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    L_OP            reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    G_OP            reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    LE_OP           reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    GE_OP           reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    EQ_OP           reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    NE_OP           reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    ,               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    )               reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .)
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103

  ! *               [ reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .) ]
  ! /               [ reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .) ]
  ! %               [ reduce using rule 31 (OperationStatement -> OperationConstant - OperationConstant .) ]
  ! +               [ shift and go to state 99 ]
  ! -               [ shift and go to state 100 ]


state 139

    (32) OperationStatement -> OperationConstant * OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    -               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    *               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    /               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    %               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    ]               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    ;               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    L_OP            reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    G_OP            reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    LE_OP           reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    GE_OP           reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    EQ_OP           reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    NE_OP           reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    ,               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)
    )               reduce using rule 32 (OperationStatement -> OperationConstant * OperationConstant .)

  ! +               [ shift and go to state 99 ]
  ! -               [ shift and go to state 100 ]
  ! *               [ shift and go to state 101 ]
  ! /               [ shift and go to state 102 ]
  ! %               [ shift and go to state 103 ]


state 140

    (33) OperationStatement -> OperationConstant / OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    -               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    *               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    /               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    %               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    ]               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    ;               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    L_OP            reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    G_OP            reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    LE_OP           reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    GE_OP           reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    EQ_OP           reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    NE_OP           reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    ,               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)
    )               reduce using rule 33 (OperationStatement -> OperationConstant / OperationConstant .)

  ! +               [ shift and go to state 99 ]
  ! -               [ shift and go to state 100 ]
  ! *               [ shift and go to state 101 ]
  ! /               [ shift and go to state 102 ]
  ! %               [ shift and go to state 103 ]


state 141

    (34) OperationStatement -> OperationConstant % OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    +               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    -               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    *               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    /               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    %               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    ]               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    ;               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    L_OP            reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    G_OP            reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    LE_OP           reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    GE_OP           reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    EQ_OP           reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    NE_OP           reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    ,               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)
    )               reduce using rule 34 (OperationStatement -> OperationConstant % OperationConstant .)

  ! +               [ shift and go to state 99 ]
  ! -               [ shift and go to state 100 ]
  ! *               [ shift and go to state 101 ]
  ! /               [ shift and go to state 102 ]
  ! %               [ shift and go to state 103 ]


state 142

    (29) OperationStatementInBracket -> ( OperationStatement ) .

    +               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    -               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    *               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    /               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    %               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ]               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ;               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    L_OP            reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    G_OP            reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    LE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    GE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    EQ_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    NE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ,               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    )               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)


state 143

    (54) If_Statement -> IF ( Compare_Expreession ) { . statements } Elif_Else
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 161
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 144

    (68) Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    )               reduce using rule 68 (Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .)
    ;               reduce using rule 68 (Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .)
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 145

    (75) While_Loop -> WHILE ( Compare_Expreession ) { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 162
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 146

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = . OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = . OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 163
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 147

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant . ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant . ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    ;               shift and go to state 164
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 148

    (83) Do_While_Loop -> DO { statements } WHILE . ( Compare_Expreession ) ;

    (               shift and go to state 165


state 149

    (84) Print_Console -> PRINT ( DQ_MSG ) ; .

    STRING          reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    IF              reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    WHILE           reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    FOR             reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    DO              reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    PRINT           reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    PRINT_LN        reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    INT             reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    INT16           reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    IDENTIFIER      reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    INC_OP          reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    DEC_OP          reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    $end            reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)
    }               reduce using rule 84 (Print_Console -> PRINT ( DQ_MSG ) ; .)


state 150

    (85) Print_Console -> PRINT ( DQ_MSG Print_Value ) . ;

    ;               shift and go to state 166


state 151

    (89) Print_Value -> empty empty . empty
    (93) empty -> .

    )               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 167

state 152

    (90) Print_Value -> , IDENTIFIER_ALL . Print_Value
    (89) Print_Value -> . empty empty empty
    (90) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (91) Print_Value -> . , CONSTANT Print_Value
    (92) Print_Value -> . , DQ_MSG Print_Value
    (93) empty -> .

    ,               shift and go to state 132
    )               reduce using rule 93 (empty -> .)

    Print_Value                    shift and go to state 168
    empty                          shift and go to state 131

state 153

    (91) Print_Value -> , CONSTANT . Print_Value
    (89) Print_Value -> . empty empty empty
    (90) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (91) Print_Value -> . , CONSTANT Print_Value
    (92) Print_Value -> . , DQ_MSG Print_Value
    (93) empty -> .

    ,               shift and go to state 132
    )               reduce using rule 93 (empty -> .)

    Print_Value                    shift and go to state 169
    empty                          shift and go to state 131

state 154

    (92) Print_Value -> , DQ_MSG . Print_Value
    (89) Print_Value -> . empty empty empty
    (90) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (91) Print_Value -> . , CONSTANT Print_Value
    (92) Print_Value -> . , DQ_MSG Print_Value
    (93) empty -> .

    ,               shift and go to state 132
    )               reduce using rule 93 (empty -> .)

    Print_Value                    shift and go to state 170
    empty                          shift and go to state 131

state 155

    (38) IDENTIFIER_ALL -> IDENTIFIER .
    (16) IDENTIFIER_ASSIGN -> IDENTIFIER . = OperationConstant
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ,               reduce using rule 38 (IDENTIFIER_ALL -> IDENTIFIER .)
    )               reduce using rule 38 (IDENTIFIER_ALL -> IDENTIFIER .)
    =               shift and go to state 51
    [               shift and go to state 77


state 156

    (86) Print_Console -> PRINT_LN ( DQ_MSG ) ; .

    STRING          reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    IF              reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    WHILE           reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    FOR             reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    DO              reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    PRINT           reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    PRINT_LN        reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    INT             reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    INT16           reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    IDENTIFIER      reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    INC_OP          reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    DEC_OP          reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    $end            reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)
    }               reduce using rule 86 (Print_Console -> PRINT_LN ( DQ_MSG ) ; .)


state 157

    (87) Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) . ;

    ;               shift and go to state 171


state 158

    (88) Print_Console -> PRINT_LN ( empty empty ) . ;

    ;               shift and go to state 172


state 159

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN . }

    }               shift and go to state 173


state 160

    (20) MULTI_ASSIGN -> CONSTANT . , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> CONSTANT . empty
    (93) empty -> .

    ,               shift and go to state 174
    }               reduce using rule 93 (empty -> .)

    empty                          shift and go to state 175

state 161

    (54) If_Statement -> IF ( Compare_Expreession ) { statements . } Elif_Else

    }               shift and go to state 176


state 162

    (75) While_Loop -> WHILE ( Compare_Expreession ) { statements . }

    }               shift and go to state 177


state 163

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant . ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant . ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    ;               shift and go to state 178
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 164

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; . Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; . Compare_Expreession ; For_Loop_Crement ) { statements }
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 79
    Compare_Expreession            shift and go to state 179
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 165

    (83) Do_While_Loop -> DO { statements } WHILE ( . Compare_Expreession ) ;
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    Compare_Expreession            shift and go to state 180
    OperationConstant              shift and go to state 79
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 166

    (85) Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .

    STRING          reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    IF              reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    WHILE           reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    FOR             reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    DO              reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    PRINT           reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    PRINT_LN        reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    INT             reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    INT16           reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    IDENTIFIER      reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    INC_OP          reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    DEC_OP          reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    $end            reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)
    }               reduce using rule 85 (Print_Console -> PRINT ( DQ_MSG Print_Value ) ; .)


state 167

    (89) Print_Value -> empty empty empty .

    )               reduce using rule 89 (Print_Value -> empty empty empty .)


state 168

    (90) Print_Value -> , IDENTIFIER_ALL Print_Value .

    )               reduce using rule 90 (Print_Value -> , IDENTIFIER_ALL Print_Value .)


state 169

    (91) Print_Value -> , CONSTANT Print_Value .

    )               reduce using rule 91 (Print_Value -> , CONSTANT Print_Value .)


state 170

    (92) Print_Value -> , DQ_MSG Print_Value .

    )               reduce using rule 92 (Print_Value -> , DQ_MSG Print_Value .)


state 171

    (87) Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .

    STRING          reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    IF              reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    WHILE           reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    FOR             reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    DO              reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    PRINT           reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    PRINT_LN        reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    INT             reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    INT16           reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    IDENTIFIER      reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    INC_OP          reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    DEC_OP          reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    $end            reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)
    }               reduce using rule 87 (Print_Console -> PRINT_LN ( DQ_MSG Print_Value ) ; .)


state 172

    (88) Print_Console -> PRINT_LN ( empty empty ) ; .

    STRING          reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    IF              reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    WHILE           reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    FOR             reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    DO              reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    PRINT           reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    PRINT_LN        reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    INT             reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    INT16           reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    IDENTIFIER      reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    INC_OP          reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    DEC_OP          reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    $end            reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)
    }               reduce using rule 88 (Print_Console -> PRINT_LN ( empty empty ) ; .)


state 173

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN } .

    ;               reduce using rule 19 (ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN } .)


state 174

    (20) MULTI_ASSIGN -> CONSTANT , . MULTI_ASSIGN
    (20) MULTI_ASSIGN -> . CONSTANT , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> . CONSTANT empty
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16

    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    CONSTANT                       shift and go to state 160
    MULTI_ASSIGN                   shift and go to state 181

state 175

    (21) MULTI_ASSIGN -> CONSTANT empty .

    }               reduce using rule 21 (MULTI_ASSIGN -> CONSTANT empty .)


state 176

    (54) If_Statement -> IF ( Compare_Expreession ) { statements } . Elif_Else
    (65) Elif_Else -> . empty
    (66) Elif_Else -> . Elif_Statement
    (67) Elif_Else -> . Else_Statement
    (93) empty -> .
    (55) Elif_Statement -> . ELIF ( Compare_Expreession ) { statements } Elif_Else
    (56) Else_Statement -> . ELSE { statements }

    STRING          reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    DO              reduce using rule 93 (empty -> .)
    PRINT           reduce using rule 93 (empty -> .)
    PRINT_LN        reduce using rule 93 (empty -> .)
    INT             reduce using rule 93 (empty -> .)
    INT16           reduce using rule 93 (empty -> .)
    IDENTIFIER      reduce using rule 93 (empty -> .)
    INC_OP          reduce using rule 93 (empty -> .)
    DEC_OP          reduce using rule 93 (empty -> .)
    $end            reduce using rule 93 (empty -> .)
    }               reduce using rule 93 (empty -> .)
    ELIF            shift and go to state 186
    ELSE            shift and go to state 187

    Elif_Else                      shift and go to state 182
    empty                          shift and go to state 183
    Elif_Statement                 shift and go to state 184
    Else_Statement                 shift and go to state 185

state 177

    (75) While_Loop -> WHILE ( Compare_Expreession ) { statements } .

    STRING          reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    IF              reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    WHILE           reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    FOR             reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    DO              reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    PRINT           reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    PRINT_LN        reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INT             reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INT16           reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    IDENTIFIER      reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INC_OP          reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    DEC_OP          reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    $end            reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    }               reduce using rule 75 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)


state 178

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; . Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; . Compare_Expreession ; For_Loop_Crement ) { statements }
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    OperationConstant              shift and go to state 79
    Compare_Expreession            shift and go to state 188
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 179

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession . ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession . ; For_Loop_Crement ) { statements }

    ;               shift and go to state 189


state 180

    (83) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession . ) ;

    )               shift and go to state 190


state 181

    (20) MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN .

    }               reduce using rule 20 (MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN .)


state 182

    (54) If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .

    STRING          reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    IF              reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    WHILE           reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    FOR             reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    DO              reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT           reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT_LN        reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INT             reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INT16           reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    IDENTIFIER      reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INC_OP          reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    DEC_OP          reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    $end            reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    }               reduce using rule 54 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)


state 183

    (65) Elif_Else -> empty .

    STRING          reduce using rule 65 (Elif_Else -> empty .)
    IF              reduce using rule 65 (Elif_Else -> empty .)
    WHILE           reduce using rule 65 (Elif_Else -> empty .)
    FOR             reduce using rule 65 (Elif_Else -> empty .)
    DO              reduce using rule 65 (Elif_Else -> empty .)
    PRINT           reduce using rule 65 (Elif_Else -> empty .)
    PRINT_LN        reduce using rule 65 (Elif_Else -> empty .)
    INT             reduce using rule 65 (Elif_Else -> empty .)
    INT16           reduce using rule 65 (Elif_Else -> empty .)
    IDENTIFIER      reduce using rule 65 (Elif_Else -> empty .)
    INC_OP          reduce using rule 65 (Elif_Else -> empty .)
    DEC_OP          reduce using rule 65 (Elif_Else -> empty .)
    $end            reduce using rule 65 (Elif_Else -> empty .)
    }               reduce using rule 65 (Elif_Else -> empty .)


state 184

    (66) Elif_Else -> Elif_Statement .

    STRING          reduce using rule 66 (Elif_Else -> Elif_Statement .)
    IF              reduce using rule 66 (Elif_Else -> Elif_Statement .)
    WHILE           reduce using rule 66 (Elif_Else -> Elif_Statement .)
    FOR             reduce using rule 66 (Elif_Else -> Elif_Statement .)
    DO              reduce using rule 66 (Elif_Else -> Elif_Statement .)
    PRINT           reduce using rule 66 (Elif_Else -> Elif_Statement .)
    PRINT_LN        reduce using rule 66 (Elif_Else -> Elif_Statement .)
    INT             reduce using rule 66 (Elif_Else -> Elif_Statement .)
    INT16           reduce using rule 66 (Elif_Else -> Elif_Statement .)
    IDENTIFIER      reduce using rule 66 (Elif_Else -> Elif_Statement .)
    INC_OP          reduce using rule 66 (Elif_Else -> Elif_Statement .)
    DEC_OP          reduce using rule 66 (Elif_Else -> Elif_Statement .)
    $end            reduce using rule 66 (Elif_Else -> Elif_Statement .)
    }               reduce using rule 66 (Elif_Else -> Elif_Statement .)


state 185

    (67) Elif_Else -> Else_Statement .

    STRING          reduce using rule 67 (Elif_Else -> Else_Statement .)
    IF              reduce using rule 67 (Elif_Else -> Else_Statement .)
    WHILE           reduce using rule 67 (Elif_Else -> Else_Statement .)
    FOR             reduce using rule 67 (Elif_Else -> Else_Statement .)
    DO              reduce using rule 67 (Elif_Else -> Else_Statement .)
    PRINT           reduce using rule 67 (Elif_Else -> Else_Statement .)
    PRINT_LN        reduce using rule 67 (Elif_Else -> Else_Statement .)
    INT             reduce using rule 67 (Elif_Else -> Else_Statement .)
    INT16           reduce using rule 67 (Elif_Else -> Else_Statement .)
    IDENTIFIER      reduce using rule 67 (Elif_Else -> Else_Statement .)
    INC_OP          reduce using rule 67 (Elif_Else -> Else_Statement .)
    DEC_OP          reduce using rule 67 (Elif_Else -> Else_Statement .)
    $end            reduce using rule 67 (Elif_Else -> Else_Statement .)
    }               reduce using rule 67 (Elif_Else -> Else_Statement .)


state 186

    (55) Elif_Statement -> ELIF . ( Compare_Expreession ) { statements } Elif_Else

    (               shift and go to state 191


state 187

    (56) Else_Statement -> ELSE . { statements }

    {               shift and go to state 192


state 188

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession . ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession . ; For_Loop_Crement ) { statements }

    ;               shift and go to state 193


state 189

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; . IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; . For_Loop_Crement ) { statements }
    (80) IDENTIFIER_ALL_ASSIGN -> . IDENTIFIER_ID = OperationConstant
    (81) For_Loop_Crement -> . IDENTIFIER INC_DEC_OPRERATOR
    (82) For_Loop_Crement -> . INC_DEC_OPRERATOR IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 194
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    IDENTIFIER_ALL_ASSIGN          shift and go to state 195
    For_Loop_Crement               shift and go to state 196
    IDENTIFIER_ID                  shift and go to state 197
    INC_DEC_OPRERATOR              shift and go to state 198
    IDENTIFIER_ARRAY               shift and go to state 25

state 190

    (83) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) . ;

    ;               shift and go to state 199


state 191

    (55) Elif_Statement -> ELIF ( . Compare_Expreession ) { statements } Elif_Else
    (68) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    Compare_Expreession            shift and go to state 200
    OperationConstant              shift and go to state 79
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    IDENTIFIER_ID                  shift and go to state 64
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 192

    (56) Else_Statement -> ELSE { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 201
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 193

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; . IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; . For_Loop_Crement ) { statements }
    (80) IDENTIFIER_ALL_ASSIGN -> . IDENTIFIER_ID = OperationConstant
    (81) For_Loop_Crement -> . IDENTIFIER INC_DEC_OPRERATOR
    (82) For_Loop_Crement -> . INC_DEC_OPRERATOR IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 194
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    IDENTIFIER_ALL_ASSIGN          shift and go to state 202
    For_Loop_Crement               shift and go to state 203
    IDENTIFIER_ID                  shift and go to state 197
    INC_DEC_OPRERATOR              shift and go to state 198
    IDENTIFIER_ARRAY               shift and go to state 25

state 194

    (81) For_Loop_Crement -> IDENTIFIER . INC_DEC_OPRERATOR
    (40) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP

    =               reduce using rule 40 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 77
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    INC_DEC_OPRERATOR              shift and go to state 204

state 195

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN . ) { statements }

    )               shift and go to state 205


state 196

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement . ) { statements }

    )               shift and go to state 206


state 197

    (80) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID . = OperationConstant

    =               shift and go to state 207


state 198

    (82) For_Loop_Crement -> INC_DEC_OPRERATOR . IDENTIFIER

    IDENTIFIER      shift and go to state 208


state 199

    (83) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .

    STRING          reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    IF              reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    WHILE           reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    FOR             reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    DO              reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    PRINT           reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    PRINT_LN        reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INT             reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INT16           reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    IDENTIFIER      reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INC_OP          reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    DEC_OP          reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    $end            reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    }               reduce using rule 83 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)


state 200

    (55) Elif_Statement -> ELIF ( Compare_Expreession . ) { statements } Elif_Else

    )               shift and go to state 209


state 201

    (56) Else_Statement -> ELSE { statements . }

    }               shift and go to state 210


state 202

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN . ) { statements }

    )               shift and go to state 211


state 203

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement . ) { statements }

    )               shift and go to state 212


state 204

    (81) For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR .

    )               reduce using rule 81 (For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR .)


state 205

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) . { statements }

    {               shift and go to state 213


state 206

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) . { statements }

    {               shift and go to state 214


state 207

    (80) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant + OperationConstant
    (31) OperationStatement -> . OperationConstant - OperationConstant
    (32) OperationStatement -> . OperationConstant * OperationConstant
    (33) OperationStatement -> . OperationConstant / OperationConstant
    (34) OperationStatement -> . OperationConstant % OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (35) MinusVariable -> . OperationVarDeclare OperationConstant
    (41) CONSTANT_ALL -> . CONSTANT
    (42) CONSTANT_ALL -> . IDENTIFIER
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (47) OperationVarDeclare -> . +
    (48) OperationVarDeclare -> . -
    (43) CONSTANT -> . CONSTANT10
    (44) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 67
    IDENTIFIER      shift and go to state 74
    +               shift and go to state 65
    -               shift and go to state 66
    CONSTANT10      shift and go to state 70
    CONSTANT16      shift and go to state 71

    IDENTIFIER_ID                  shift and go to state 64
    OperationConstant              shift and go to state 215
    OperationStatement             shift and go to state 60
    OperationStatementInBracket    shift and go to state 61
    MinusVariable                  shift and go to state 62
    CONSTANT_ALL                   shift and go to state 63
    OperationVarDeclare            shift and go to state 68
    CONSTANT                       shift and go to state 69
    IDENTIFIER_ARRAY               shift and go to state 25

state 208

    (82) For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER .

    )               reduce using rule 82 (For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER .)


state 209

    (55) Elif_Statement -> ELIF ( Compare_Expreession ) . { statements } Elif_Else

    {               shift and go to state 216


state 210

    (56) Else_Statement -> ELSE { statements } .

    STRING          reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    IF              reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    WHILE           reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    FOR             reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    DO              reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    PRINT           reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    PRINT_LN        reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    INT             reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    INT16           reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    IDENTIFIER      reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    INC_OP          reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    DEC_OP          reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    $end            reduce using rule 56 (Else_Statement -> ELSE { statements } .)
    }               reduce using rule 56 (Else_Statement -> ELSE { statements } .)


state 211

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) . { statements }

    {               shift and go to state 217


state 212

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) . { statements }

    {               shift and go to state 218


state 213

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 219
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 214

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 220
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 215

    (80) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant .
    (30) OperationStatement -> OperationConstant . + OperationConstant
    (31) OperationStatement -> OperationConstant . - OperationConstant
    (32) OperationStatement -> OperationConstant . * OperationConstant
    (33) OperationStatement -> OperationConstant . / OperationConstant
    (34) OperationStatement -> OperationConstant . % OperationConstant

    )               reduce using rule 80 (IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant .)
    +               shift and go to state 99
    -               shift and go to state 100
    *               shift and go to state 101
    /               shift and go to state 102
    %               shift and go to state 103


state 216

    (55) Elif_Statement -> ELIF ( Compare_Expreession ) { . statements } Elif_Else
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    statements                     shift and go to state 221
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 217

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    DeclarationTypeNumber          shift and go to state 11
    statements                     shift and go to state 222
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 218

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { . statements }
    (57) statements -> . empty empty
    (58) statements -> . Declaration statements
    (59) statements -> . Expression statements
    (60) statements -> . If_Statement statements
    (61) statements -> . While_Loop statements
    (62) statements -> . For_Loop statements
    (63) statements -> . Do_While_Loop statements
    (64) statements -> . Print_Console statements
    (93) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (49) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (50) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (51) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (52) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (53) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (54) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (75) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (76) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (78) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (83) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (84) Print_Console -> . PRINT ( DQ_MSG ) ;
    (85) Print_Console -> . PRINT ( DQ_MSG Print_Value ) ;
    (86) Print_Console -> . PRINT_LN ( DQ_MSG ) ;
    (87) Print_Console -> . PRINT_LN ( DQ_MSG Print_Value ) ;
    (88) Print_Console -> . PRINT_LN ( empty empty ) ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (39) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (40) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (45) INC_DEC_OPRERATOR -> . INC_OP
    (46) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 93 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT           shift and go to state 21
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    DeclarationTypeNumber          shift and go to state 11
    statements                     shift and go to state 223
    empty                          shift and go to state 84
    Declaration                    shift and go to state 85
    Expression                     shift and go to state 86
    If_Statement                   shift and go to state 87
    While_Loop                     shift and go to state 88
    For_Loop                       shift and go to state 89
    Do_While_Loop                  shift and go to state 90
    Print_Console                  shift and go to state 91
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    IDENTIFIER_ARRAY               shift and go to state 25

state 219

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements . }

    }               shift and go to state 224


state 220

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements . }

    }               shift and go to state 225


state 221

    (55) Elif_Statement -> ELIF ( Compare_Expreession ) { statements . } Elif_Else

    }               shift and go to state 226


state 222

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements . }

    }               shift and go to state 227


state 223

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements . }

    }               shift and go to state 228


state 224

    (78) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .

    STRING          reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IF              reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    WHILE           reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    FOR             reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DO              reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT           reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT_LN        reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT             reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT16           reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IDENTIFIER      reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INC_OP          reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DEC_OP          reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    $end            reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    }               reduce using rule 78 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)


state 225

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .

    STRING          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IF              reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    WHILE           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    FOR             reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DO              reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT_LN        reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT             reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT16           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IDENTIFIER      reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INC_OP          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DEC_OP          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    $end            reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    }               reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)


state 226

    (55) Elif_Statement -> ELIF ( Compare_Expreession ) { statements } . Elif_Else
    (65) Elif_Else -> . empty
    (66) Elif_Else -> . Elif_Statement
    (67) Elif_Else -> . Else_Statement
    (93) empty -> .
    (55) Elif_Statement -> . ELIF ( Compare_Expreession ) { statements } Elif_Else
    (56) Else_Statement -> . ELSE { statements }

    STRING          reduce using rule 93 (empty -> .)
    IF              reduce using rule 93 (empty -> .)
    WHILE           reduce using rule 93 (empty -> .)
    FOR             reduce using rule 93 (empty -> .)
    DO              reduce using rule 93 (empty -> .)
    PRINT           reduce using rule 93 (empty -> .)
    PRINT_LN        reduce using rule 93 (empty -> .)
    INT             reduce using rule 93 (empty -> .)
    INT16           reduce using rule 93 (empty -> .)
    IDENTIFIER      reduce using rule 93 (empty -> .)
    INC_OP          reduce using rule 93 (empty -> .)
    DEC_OP          reduce using rule 93 (empty -> .)
    $end            reduce using rule 93 (empty -> .)
    }               reduce using rule 93 (empty -> .)
    ELIF            shift and go to state 186
    ELSE            shift and go to state 187

    Elif_Else                      shift and go to state 229
    empty                          shift and go to state 183
    Elif_Statement                 shift and go to state 184
    Else_Statement                 shift and go to state 185

state 227

    (76) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .

    STRING          reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IF              reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    WHILE           reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    FOR             reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DO              reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT           reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT_LN        reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT             reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT16           reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IDENTIFIER      reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INC_OP          reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DEC_OP          reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    $end            reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    }               reduce using rule 76 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)


state 228

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .

    STRING          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IF              reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    WHILE           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    FOR             reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DO              reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT_LN        reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT             reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT16           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IDENTIFIER      reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INC_OP          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DEC_OP          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    $end            reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    }               reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)


state 229

    (55) Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .

    STRING          reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    IF              reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    WHILE           reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    FOR             reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    DO              reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT           reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT_LN        reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INT             reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INT16           reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    IDENTIFIER      reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INC_OP          reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    DEC_OP          reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    $end            reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    }               reduce using rule 55 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 92 resolved as shift
WARNING: shift/reduce conflict for ) in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 106 resolved as shift
WARNING: shift/reduce conflict for - in state 106 resolved as shift
WARNING: shift/reduce conflict for * in state 106 resolved as shift
WARNING: shift/reduce conflict for / in state 106 resolved as shift
WARNING: shift/reduce conflict for % in state 106 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (ARRAY_SIZE -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (IDENTIFIER_ID -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 56
WARNING: reduce/reduce conflict in state 56 resolved using rule (ARRAY_SIZE -> IDENTIFIER)
WARNING: rejected rule (IDENTIFIER_ID -> IDENTIFIER) in state 56
WARNING: reduce/reduce conflict in state 74 resolved using rule (IDENTIFIER_ID -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 74
WARNING: Rule (CONSTANT_ALL -> IDENTIFIER) is never reduced
