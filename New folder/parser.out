Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> line
Rule 1     line -> Input line
Rule 2     line -> EXIT empty
Rule 3     Input -> Declaration
Rule 4     Input -> Expression
Rule 5     Input -> If_Statement
Rule 6     Input -> While_Loop
Rule 7     Input -> For_Loop
Rule 8     Input -> Do_While_Loop
Rule 9     Input -> Print_Console
Rule 10    Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ;
Rule 11    Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
Rule 12    Declaration -> STRING IDENTIFIER ;
Rule 13    Declaration -> STRING STRING_ASSIGN ;
Rule 14    DeclarationTypeNumber -> INT
Rule 15    DeclarationTypeNumber -> INT16
Rule 16    IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant
Rule 17    STRING_ASSIGN -> IDENTIFIER = DQ_MSG
Rule 18    IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ]
Rule 19    ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN }
Rule 20    MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN
Rule 21    MULTI_ASSIGN -> CONSTANT empty
Rule 22    ARRAY_SIZE -> IDENTIFIER
Rule 23    ARRAY_SIZE -> OperationConstant
Rule 24    OperationConstant -> OperationStatement
Rule 25    OperationConstant -> OperationStatementInBracket
Rule 26    OperationConstant -> MinusVariable
Rule 27    OperationConstant -> CONSTANT_ALL
Rule 28    OperationConstant -> IDENTIFIER_ID
Rule 29    OperationStatementInBracket -> ( OperationStatement )
Rule 30    OperationStatement -> OperationConstant Operator OperationConstant
Rule 31    MinusVariable -> OperationVarDeclare OperationConstant
Rule 32    IDENTIFIER_ALL -> IDENTIFIER_ASSIGN
Rule 33    IDENTIFIER_ALL -> IDENTIFIER_ARRAY
Rule 34    IDENTIFIER_ALL -> IDENTIFIER
Rule 35    IDENTIFIER_ID -> IDENTIFIER_ARRAY
Rule 36    IDENTIFIER_ID -> IDENTIFIER
Rule 37    CONSTANT_ALL -> CONSTANT
Rule 38    CONSTANT_ALL -> IDENTIFIER
Rule 39    CONSTANT -> CONSTANT10
Rule 40    CONSTANT -> CONSTANT16
Rule 41    INC_DEC_OPRERATOR -> INC_OP
Rule 42    INC_DEC_OPRERATOR -> DEC_OP
Rule 43    OperationVarDeclare -> +
Rule 44    OperationVarDeclare -> -
Rule 45    Operator -> +
Rule 46    Operator -> -
Rule 47    Operator -> *
Rule 48    Operator -> /
Rule 49    Operator -> %
Rule 50    Expression -> IDENTIFIER_ID = OperationConstant ;
Rule 51    Expression -> IDENTIFIER_ID = DQ_MSG ;
Rule 52    Expression -> ARRAY_MULTI_ASSIGN empty ;
Rule 53    Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ;
Rule 54    Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ;
Rule 55    If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else
Rule 56    Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else
Rule 57    Else_Statement -> ELSE { statements }
Rule 58    statements -> empty empty
Rule 59    statements -> Declaration statements
Rule 60    statements -> Expression statements
Rule 61    statements -> If_Statement statements
Rule 62    statements -> While_Loop statements
Rule 63    statements -> For_Loop statements
Rule 64    statements -> Do_While_Loop statements
Rule 65    statements -> Print_Console statements
Rule 66    Elif_Else -> empty
Rule 67    Elif_Else -> Elif_Statement
Rule 68    Elif_Else -> Else_Statement
Rule 69    Compare_Expreession -> OperationConstant Compare_Operator OperationConstant
Rule 70    Compare_Operator -> L_OP
Rule 71    Compare_Operator -> G_OP
Rule 72    Compare_Operator -> LE_OP
Rule 73    Compare_Operator -> GE_OP
Rule 74    Compare_Operator -> EQ_OP
Rule 75    Compare_Operator -> NE_OP
Rule 76    While_Loop -> WHILE ( Compare_Expreession ) { statements }
Rule 77    For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
Rule 78    For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
Rule 79    For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
Rule 80    For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
Rule 81    IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant
Rule 82    For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR
Rule 83    For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER
Rule 84    Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ;
Rule 85    Print_Console -> PRINT_AL ( DQ_MSG ) ;
Rule 86    Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ;
Rule 87    Print_Console -> PRINT_LN ( ) empty empty ;
Rule 88    PRINT_AL -> PRINT
Rule 89    PRINT_AL -> PRINT_LN
Rule 90    Print_Value -> empty empty empty
Rule 91    Print_Value -> , IDENTIFIER_ALL Print_Value
Rule 92    Print_Value -> , CONSTANT Print_Value
Rule 93    Print_Value -> , DQ_MSG Print_Value
Rule 94    empty -> <empty>
Rule 95    EXIT -> <empty>

Terminals, with rules where they appear

%                    : 49
(                    : 29 55 56 76 77 78 79 80 84 85 86 87
)                    : 29 55 56 76 77 78 79 80 84 85 86 87
*                    : 47
+                    : 43 45
,                    : 20 91 92 93
-                    : 44 46
/                    : 48
;                    : 10 11 12 13 50 51 52 53 54 77 77 78 78 79 79 80 80 84 85 86 87
=                    : 16 17 19 50 51 77 78 79 80 81
CONSTANT10           : 39
CONSTANT16           : 40
DEC_OP               : 42
DO                   : 84
DQ_MSG               : 17 51 85 86 93
ELIF                 : 56
ELSE                 : 57
EQ_OP                : 74
FOR                  : 77 78 79 80
GE_OP                : 73
G_OP                 : 71
IDENTIFIER           : 12 16 17 18 19 22 34 36 38 77 78 79 80 82 83
IF                   : 55
INC_OP               : 41
INT                  : 14
INT16                : 15
LE_OP                : 72
L_OP                 : 70
NE_OP                : 75
PRINT                : 88
PRINT_LN             : 87 89
STRING               : 12 13
WHILE                : 76 84
[                    : 18 19
]                    : 18 19
error                : 
{                    : 19 55 56 57 76 77 78 79 80 84
}                    : 19 55 56 57 76 77 78 79 80 84

Nonterminals, with rules where they appear

ARRAY_MULTI_ASSIGN   : 11 52
ARRAY_SIZE           : 18
CONSTANT             : 20 21 37 92
CONSTANT_ALL         : 27
Compare_Expreession  : 55 56 76 77 78 79 80 84
Compare_Operator     : 69
Declaration          : 3 59
DeclarationTypeNumber : 10 11 77 78
Do_While_Loop        : 8 64
EXIT                 : 2
Elif_Else            : 55 56
Elif_Statement       : 67
Else_Statement       : 68
Expression           : 4 60
For_Loop             : 7 63
For_Loop_Crement     : 78 80
IDENTIFIER_ALL       : 10 91
IDENTIFIER_ALL_ASSIGN : 77 79
IDENTIFIER_ARRAY     : 33 35
IDENTIFIER_ASSIGN    : 32
IDENTIFIER_ID        : 28 50 51 53 54 81
INC_DEC_OPRERATOR    : 53 54 82 83
If_Statement         : 5 61
Input                : 1
MULTI_ASSIGN         : 19 20
MinusVariable        : 26
OperationConstant    : 16 23 30 30 31 50 69 69 77 78 79 80 81
OperationStatement   : 24 29
OperationStatementInBracket : 25
OperationVarDeclare  : 31
Operator             : 30
PRINT_AL             : 85 86
Print_Console        : 9 65
Print_Value          : 86 91 92 93
STRING_ASSIGN        : 13
While_Loop           : 6 62
empty                : 2 21 52 58 58 66 87 87 90 90 90
line                 : 1 0
statements           : 55 56 57 59 60 61 62 63 64 65 76 77 78 79 80 84

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (3) Input -> . Declaration
    (4) Input -> . Expression
    (5) Input -> . If_Statement
    (6) Input -> . While_Loop
    (7) Input -> . For_Loop
    (8) Input -> . Do_While_Loop
    (9) Input -> . Print_Console
    (95) EXIT -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    $end            reduce using rule 95 (EXIT -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    line                           shift and go to state 1
    Input                          shift and go to state 2
    EXIT                           shift and go to state 3
    Declaration                    shift and go to state 4
    Expression                     shift and go to state 5
    If_Statement                   shift and go to state 6
    While_Loop                     shift and go to state 7
    For_Loop                       shift and go to state 8
    Do_While_Loop                  shift and go to state 9
    Print_Console                  shift and go to state 10
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 1

    (0) S' -> line .



state 2

    (1) line -> Input . line
    (1) line -> . Input line
    (2) line -> . EXIT empty
    (3) Input -> . Declaration
    (4) Input -> . Expression
    (5) Input -> . If_Statement
    (6) Input -> . While_Loop
    (7) Input -> . For_Loop
    (8) Input -> . Do_While_Loop
    (9) Input -> . Print_Console
    (95) EXIT -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    $end            reduce using rule 95 (EXIT -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    Input                          shift and go to state 2
    line                           shift and go to state 29
    EXIT                           shift and go to state 3
    Declaration                    shift and go to state 4
    Expression                     shift and go to state 5
    If_Statement                   shift and go to state 6
    While_Loop                     shift and go to state 7
    For_Loop                       shift and go to state 8
    Do_While_Loop                  shift and go to state 9
    Print_Console                  shift and go to state 10
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 3

    (2) line -> EXIT . empty
    (94) empty -> .

    $end            reduce using rule 94 (empty -> .)

    empty                          shift and go to state 30

state 4

    (3) Input -> Declaration .

    STRING          reduce using rule 3 (Input -> Declaration .)
    IF              reduce using rule 3 (Input -> Declaration .)
    WHILE           reduce using rule 3 (Input -> Declaration .)
    FOR             reduce using rule 3 (Input -> Declaration .)
    DO              reduce using rule 3 (Input -> Declaration .)
    PRINT_LN        reduce using rule 3 (Input -> Declaration .)
    INT             reduce using rule 3 (Input -> Declaration .)
    INT16           reduce using rule 3 (Input -> Declaration .)
    IDENTIFIER      reduce using rule 3 (Input -> Declaration .)
    INC_OP          reduce using rule 3 (Input -> Declaration .)
    DEC_OP          reduce using rule 3 (Input -> Declaration .)
    PRINT           reduce using rule 3 (Input -> Declaration .)
    $end            reduce using rule 3 (Input -> Declaration .)


state 5

    (4) Input -> Expression .

    STRING          reduce using rule 4 (Input -> Expression .)
    IF              reduce using rule 4 (Input -> Expression .)
    WHILE           reduce using rule 4 (Input -> Expression .)
    FOR             reduce using rule 4 (Input -> Expression .)
    DO              reduce using rule 4 (Input -> Expression .)
    PRINT_LN        reduce using rule 4 (Input -> Expression .)
    INT             reduce using rule 4 (Input -> Expression .)
    INT16           reduce using rule 4 (Input -> Expression .)
    IDENTIFIER      reduce using rule 4 (Input -> Expression .)
    INC_OP          reduce using rule 4 (Input -> Expression .)
    DEC_OP          reduce using rule 4 (Input -> Expression .)
    PRINT           reduce using rule 4 (Input -> Expression .)
    $end            reduce using rule 4 (Input -> Expression .)


state 6

    (5) Input -> If_Statement .

    STRING          reduce using rule 5 (Input -> If_Statement .)
    IF              reduce using rule 5 (Input -> If_Statement .)
    WHILE           reduce using rule 5 (Input -> If_Statement .)
    FOR             reduce using rule 5 (Input -> If_Statement .)
    DO              reduce using rule 5 (Input -> If_Statement .)
    PRINT_LN        reduce using rule 5 (Input -> If_Statement .)
    INT             reduce using rule 5 (Input -> If_Statement .)
    INT16           reduce using rule 5 (Input -> If_Statement .)
    IDENTIFIER      reduce using rule 5 (Input -> If_Statement .)
    INC_OP          reduce using rule 5 (Input -> If_Statement .)
    DEC_OP          reduce using rule 5 (Input -> If_Statement .)
    PRINT           reduce using rule 5 (Input -> If_Statement .)
    $end            reduce using rule 5 (Input -> If_Statement .)


state 7

    (6) Input -> While_Loop .

    STRING          reduce using rule 6 (Input -> While_Loop .)
    IF              reduce using rule 6 (Input -> While_Loop .)
    WHILE           reduce using rule 6 (Input -> While_Loop .)
    FOR             reduce using rule 6 (Input -> While_Loop .)
    DO              reduce using rule 6 (Input -> While_Loop .)
    PRINT_LN        reduce using rule 6 (Input -> While_Loop .)
    INT             reduce using rule 6 (Input -> While_Loop .)
    INT16           reduce using rule 6 (Input -> While_Loop .)
    IDENTIFIER      reduce using rule 6 (Input -> While_Loop .)
    INC_OP          reduce using rule 6 (Input -> While_Loop .)
    DEC_OP          reduce using rule 6 (Input -> While_Loop .)
    PRINT           reduce using rule 6 (Input -> While_Loop .)
    $end            reduce using rule 6 (Input -> While_Loop .)


state 8

    (7) Input -> For_Loop .

    STRING          reduce using rule 7 (Input -> For_Loop .)
    IF              reduce using rule 7 (Input -> For_Loop .)
    WHILE           reduce using rule 7 (Input -> For_Loop .)
    FOR             reduce using rule 7 (Input -> For_Loop .)
    DO              reduce using rule 7 (Input -> For_Loop .)
    PRINT_LN        reduce using rule 7 (Input -> For_Loop .)
    INT             reduce using rule 7 (Input -> For_Loop .)
    INT16           reduce using rule 7 (Input -> For_Loop .)
    IDENTIFIER      reduce using rule 7 (Input -> For_Loop .)
    INC_OP          reduce using rule 7 (Input -> For_Loop .)
    DEC_OP          reduce using rule 7 (Input -> For_Loop .)
    PRINT           reduce using rule 7 (Input -> For_Loop .)
    $end            reduce using rule 7 (Input -> For_Loop .)


state 9

    (8) Input -> Do_While_Loop .

    STRING          reduce using rule 8 (Input -> Do_While_Loop .)
    IF              reduce using rule 8 (Input -> Do_While_Loop .)
    WHILE           reduce using rule 8 (Input -> Do_While_Loop .)
    FOR             reduce using rule 8 (Input -> Do_While_Loop .)
    DO              reduce using rule 8 (Input -> Do_While_Loop .)
    PRINT_LN        reduce using rule 8 (Input -> Do_While_Loop .)
    INT             reduce using rule 8 (Input -> Do_While_Loop .)
    INT16           reduce using rule 8 (Input -> Do_While_Loop .)
    IDENTIFIER      reduce using rule 8 (Input -> Do_While_Loop .)
    INC_OP          reduce using rule 8 (Input -> Do_While_Loop .)
    DEC_OP          reduce using rule 8 (Input -> Do_While_Loop .)
    PRINT           reduce using rule 8 (Input -> Do_While_Loop .)
    $end            reduce using rule 8 (Input -> Do_While_Loop .)


state 10

    (9) Input -> Print_Console .

    STRING          reduce using rule 9 (Input -> Print_Console .)
    IF              reduce using rule 9 (Input -> Print_Console .)
    WHILE           reduce using rule 9 (Input -> Print_Console .)
    FOR             reduce using rule 9 (Input -> Print_Console .)
    DO              reduce using rule 9 (Input -> Print_Console .)
    PRINT_LN        reduce using rule 9 (Input -> Print_Console .)
    INT             reduce using rule 9 (Input -> Print_Console .)
    INT16           reduce using rule 9 (Input -> Print_Console .)
    IDENTIFIER      reduce using rule 9 (Input -> Print_Console .)
    INC_OP          reduce using rule 9 (Input -> Print_Console .)
    DEC_OP          reduce using rule 9 (Input -> Print_Console .)
    PRINT           reduce using rule 9 (Input -> Print_Console .)
    $end            reduce using rule 9 (Input -> Print_Console .)


state 11

    (10) Declaration -> DeclarationTypeNumber . IDENTIFIER_ALL ;
    (11) Declaration -> DeclarationTypeNumber . ARRAY_MULTI_ASSIGN ;
    (32) IDENTIFIER_ALL -> . IDENTIFIER_ASSIGN
    (33) IDENTIFIER_ALL -> . IDENTIFIER_ARRAY
    (34) IDENTIFIER_ALL -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (16) IDENTIFIER_ASSIGN -> . IDENTIFIER = OperationConstant
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 35

    IDENTIFIER_ALL                 shift and go to state 31
    ARRAY_MULTI_ASSIGN             shift and go to state 32
    IDENTIFIER_ASSIGN              shift and go to state 33
    IDENTIFIER_ARRAY               shift and go to state 34

state 12

    (52) Expression -> ARRAY_MULTI_ASSIGN . empty ;
    (94) empty -> .

    ;               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 36

state 13

    (12) Declaration -> STRING . IDENTIFIER ;
    (13) Declaration -> STRING . STRING_ASSIGN ;
    (17) STRING_ASSIGN -> . IDENTIFIER = DQ_MSG

    IDENTIFIER      shift and go to state 37

    STRING_ASSIGN                  shift and go to state 38

state 14

    (36) IDENTIFIER_ID -> IDENTIFIER .
    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER . [ ] = { MULTI_ASSIGN }
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    =               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    INC_OP          reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    DEC_OP          reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 39


state 15

    (50) Expression -> IDENTIFIER_ID . = OperationConstant ;
    (51) Expression -> IDENTIFIER_ID . = DQ_MSG ;
    (53) Expression -> IDENTIFIER_ID . INC_DEC_OPRERATOR ;
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP

    =               shift and go to state 40
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    INC_DEC_OPRERATOR              shift and go to state 41

state 16

    (54) Expression -> INC_DEC_OPRERATOR . IDENTIFIER_ID ;
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 43

    IDENTIFIER_ID                  shift and go to state 42
    IDENTIFIER_ARRAY               shift and go to state 25

state 17

    (55) If_Statement -> IF . ( Compare_Expreession ) { statements } Elif_Else

    (               shift and go to state 44


state 18

    (76) While_Loop -> WHILE . ( Compare_Expreession ) { statements }

    (               shift and go to state 45


state 19

    (77) For_Loop -> FOR . ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR . ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> FOR . ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR . ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    (               shift and go to state 46


state 20

    (84) Do_While_Loop -> DO . { statements } WHILE ( Compare_Expreession ) ;

    {               shift and go to state 47


state 21

    (85) Print_Console -> PRINT_AL . ( DQ_MSG ) ;
    (86) Print_Console -> PRINT_AL . ( DQ_MSG Print_Value ) ;

    (               shift and go to state 48


state 22

    (87) Print_Console -> PRINT_LN . ( ) empty empty ;
    (89) PRINT_AL -> PRINT_LN .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 49

  ! (               [ reduce using rule 89 (PRINT_AL -> PRINT_LN .) ]


state 23

    (14) DeclarationTypeNumber -> INT .

    IDENTIFIER      reduce using rule 14 (DeclarationTypeNumber -> INT .)


state 24

    (15) DeclarationTypeNumber -> INT16 .

    IDENTIFIER      reduce using rule 15 (DeclarationTypeNumber -> INT16 .)


state 25

    (35) IDENTIFIER_ID -> IDENTIFIER_ARRAY .

    =               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    INC_OP          reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    DEC_OP          reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ;               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    +               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    -               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    *               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    /               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    %               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ]               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    L_OP            reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    G_OP            reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    LE_OP           reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    GE_OP           reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    EQ_OP           reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    NE_OP           reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    ,               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)
    )               reduce using rule 35 (IDENTIFIER_ID -> IDENTIFIER_ARRAY .)


state 26

    (41) INC_DEC_OPRERATOR -> INC_OP .

    IDENTIFIER      reduce using rule 41 (INC_DEC_OPRERATOR -> INC_OP .)
    ;               reduce using rule 41 (INC_DEC_OPRERATOR -> INC_OP .)
    )               reduce using rule 41 (INC_DEC_OPRERATOR -> INC_OP .)


state 27

    (42) INC_DEC_OPRERATOR -> DEC_OP .

    IDENTIFIER      reduce using rule 42 (INC_DEC_OPRERATOR -> DEC_OP .)
    ;               reduce using rule 42 (INC_DEC_OPRERATOR -> DEC_OP .)
    )               reduce using rule 42 (INC_DEC_OPRERATOR -> DEC_OP .)


state 28

    (88) PRINT_AL -> PRINT .

    (               reduce using rule 88 (PRINT_AL -> PRINT .)


state 29

    (1) line -> Input line .

    $end            reduce using rule 1 (line -> Input line .)


state 30

    (2) line -> EXIT empty .

    $end            reduce using rule 2 (line -> EXIT empty .)


state 31

    (10) Declaration -> DeclarationTypeNumber IDENTIFIER_ALL . ;

    ;               shift and go to state 50


state 32

    (11) Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN . ;

    ;               shift and go to state 51


state 33

    (32) IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .

    ;               reduce using rule 32 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)
    ,               reduce using rule 32 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)
    )               reduce using rule 32 (IDENTIFIER_ALL -> IDENTIFIER_ASSIGN .)


state 34

    (33) IDENTIFIER_ALL -> IDENTIFIER_ARRAY .

    ;               reduce using rule 33 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)
    ,               reduce using rule 33 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)
    )               reduce using rule 33 (IDENTIFIER_ALL -> IDENTIFIER_ARRAY .)


state 35

    (34) IDENTIFIER_ALL -> IDENTIFIER .
    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER . [ ] = { MULTI_ASSIGN }
    (16) IDENTIFIER_ASSIGN -> IDENTIFIER . = OperationConstant
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ;               reduce using rule 34 (IDENTIFIER_ALL -> IDENTIFIER .)
    [               shift and go to state 39
    =               shift and go to state 52


state 36

    (52) Expression -> ARRAY_MULTI_ASSIGN empty . ;

    ;               shift and go to state 53


state 37

    (12) Declaration -> STRING IDENTIFIER . ;
    (17) STRING_ASSIGN -> IDENTIFIER . = DQ_MSG

    ;               shift and go to state 54
    =               shift and go to state 55


state 38

    (13) Declaration -> STRING STRING_ASSIGN . ;

    ;               shift and go to state 56


state 39

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ . ] = { MULTI_ASSIGN }
    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ . ARRAY_SIZE ]
    (22) ARRAY_SIZE -> . IDENTIFIER
    (23) ARRAY_SIZE -> . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    ]               shift and go to state 58
    IDENTIFIER      shift and go to state 57
    (               shift and go to state 66
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    ARRAY_SIZE                     shift and go to state 59
    OperationConstant              shift and go to state 60
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 40

    (50) Expression -> IDENTIFIER_ID = . OperationConstant ;
    (51) Expression -> IDENTIFIER_ID = . DQ_MSG ;
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    DQ_MSG          shift and go to state 74
    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    IDENTIFIER_ID                  shift and go to state 65
    OperationConstant              shift and go to state 73
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 41

    (53) Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR . ;

    ;               shift and go to state 76


state 42

    (54) Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID . ;

    ;               shift and go to state 77


state 43

    (36) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ;               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 78


state 44

    (55) If_Statement -> IF ( . Compare_Expreession ) { statements } Elif_Else
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    Compare_Expreession            shift and go to state 79
    OperationConstant              shift and go to state 80
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 45

    (76) While_Loop -> WHILE ( . Compare_Expreession ) { statements }
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    Compare_Expreession            shift and go to state 81
    OperationConstant              shift and go to state 80
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 46

    (77) For_Loop -> FOR ( . DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( . DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> FOR ( . IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( . IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16

    IDENTIFIER      shift and go to state 83
    INT             shift and go to state 23
    INT16           shift and go to state 24

    DeclarationTypeNumber          shift and go to state 82

state 47

    (84) Do_While_Loop -> DO { . statements } WHILE ( Compare_Expreession ) ;
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 84
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 48

    (85) Print_Console -> PRINT_AL ( . DQ_MSG ) ;
    (86) Print_Console -> PRINT_AL ( . DQ_MSG Print_Value ) ;

    DQ_MSG          shift and go to state 93


state 49

    (87) Print_Console -> PRINT_LN ( . ) empty empty ;

    )               shift and go to state 94


state 50

    (10) Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .

    STRING          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    IF              reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    WHILE           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    FOR             reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    DO              reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    PRINT_LN        reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INT             reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INT16           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    IDENTIFIER      reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    INC_OP          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    DEC_OP          reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    PRINT           reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    $end            reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)
    }               reduce using rule 10 (Declaration -> DeclarationTypeNumber IDENTIFIER_ALL ; .)


state 51

    (11) Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .

    STRING          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    IF              reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    WHILE           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    FOR             reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    DO              reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    PRINT_LN        reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INT             reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INT16           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    IDENTIFIER      reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    INC_OP          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    DEC_OP          reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    PRINT           reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    $end            reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)
    }               reduce using rule 11 (Declaration -> DeclarationTypeNumber ARRAY_MULTI_ASSIGN ; .)


state 52

    (16) IDENTIFIER_ASSIGN -> IDENTIFIER = . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 95
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 53

    (52) Expression -> ARRAY_MULTI_ASSIGN empty ; .

    STRING          reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    IF              reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    WHILE           reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    FOR             reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    DO              reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    PRINT_LN        reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INT             reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INT16           reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    IDENTIFIER      reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    INC_OP          reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    DEC_OP          reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    PRINT           reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    $end            reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)
    }               reduce using rule 52 (Expression -> ARRAY_MULTI_ASSIGN empty ; .)


state 54

    (12) Declaration -> STRING IDENTIFIER ; .

    STRING          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    IF              reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    WHILE           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    FOR             reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    DO              reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    PRINT_LN        reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INT             reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INT16           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    IDENTIFIER      reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    INC_OP          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    DEC_OP          reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    PRINT           reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    $end            reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)
    }               reduce using rule 12 (Declaration -> STRING IDENTIFIER ; .)


state 55

    (17) STRING_ASSIGN -> IDENTIFIER = . DQ_MSG

    DQ_MSG          shift and go to state 96


state 56

    (13) Declaration -> STRING STRING_ASSIGN ; .

    STRING          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    IF              reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    WHILE           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    FOR             reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    DO              reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    PRINT_LN        reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INT             reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INT16           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    IDENTIFIER      reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    INC_OP          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    DEC_OP          reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    PRINT           reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    $end            reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)
    }               reduce using rule 13 (Declaration -> STRING STRING_ASSIGN ; .)


state 57

    (22) ARRAY_SIZE -> IDENTIFIER .
    (38) CONSTANT_ALL -> IDENTIFIER .
    (36) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

  ! reduce/reduce conflict for ] resolved using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
  ! reduce/reduce conflict for + resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for - resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for * resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for / resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for % resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ] resolved using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
    ]               reduce using rule 22 (ARRAY_SIZE -> IDENTIFIER .)
    +               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    -               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    *               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    /               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    %               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 78

  ! +               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! -               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! *               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! /               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! %               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .) ]


state 58

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] . = { MULTI_ASSIGN }

    =               shift and go to state 97


state 59

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE . ]

    ]               shift and go to state 98


state 60

    (23) ARRAY_SIZE -> OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    ]               reduce using rule 23 (ARRAY_SIZE -> OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 61

    (24) OperationConstant -> OperationStatement .

    +               reduce using rule 24 (OperationConstant -> OperationStatement .)
    -               reduce using rule 24 (OperationConstant -> OperationStatement .)
    *               reduce using rule 24 (OperationConstant -> OperationStatement .)
    /               reduce using rule 24 (OperationConstant -> OperationStatement .)
    %               reduce using rule 24 (OperationConstant -> OperationStatement .)
    ]               reduce using rule 24 (OperationConstant -> OperationStatement .)
    ;               reduce using rule 24 (OperationConstant -> OperationStatement .)
    L_OP            reduce using rule 24 (OperationConstant -> OperationStatement .)
    G_OP            reduce using rule 24 (OperationConstant -> OperationStatement .)
    LE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    GE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    EQ_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    NE_OP           reduce using rule 24 (OperationConstant -> OperationStatement .)
    ,               reduce using rule 24 (OperationConstant -> OperationStatement .)
    )               reduce using rule 24 (OperationConstant -> OperationStatement .)


state 62

    (25) OperationConstant -> OperationStatementInBracket .

    +               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    -               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    *               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    /               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    %               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ]               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ;               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    L_OP            reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    G_OP            reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    LE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    GE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    EQ_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    NE_OP           reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    ,               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)
    )               reduce using rule 25 (OperationConstant -> OperationStatementInBracket .)


state 63

    (26) OperationConstant -> MinusVariable .

    +               reduce using rule 26 (OperationConstant -> MinusVariable .)
    -               reduce using rule 26 (OperationConstant -> MinusVariable .)
    *               reduce using rule 26 (OperationConstant -> MinusVariable .)
    /               reduce using rule 26 (OperationConstant -> MinusVariable .)
    %               reduce using rule 26 (OperationConstant -> MinusVariable .)
    ]               reduce using rule 26 (OperationConstant -> MinusVariable .)
    ;               reduce using rule 26 (OperationConstant -> MinusVariable .)
    L_OP            reduce using rule 26 (OperationConstant -> MinusVariable .)
    G_OP            reduce using rule 26 (OperationConstant -> MinusVariable .)
    LE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    GE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    EQ_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    NE_OP           reduce using rule 26 (OperationConstant -> MinusVariable .)
    ,               reduce using rule 26 (OperationConstant -> MinusVariable .)
    )               reduce using rule 26 (OperationConstant -> MinusVariable .)


state 64

    (27) OperationConstant -> CONSTANT_ALL .

    +               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    -               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    *               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    /               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    %               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ]               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ;               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    L_OP            reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    G_OP            reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    LE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    GE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    EQ_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    NE_OP           reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    ,               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)
    )               reduce using rule 27 (OperationConstant -> CONSTANT_ALL .)


state 65

    (28) OperationConstant -> IDENTIFIER_ID .

    +               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    -               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    *               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    /               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    %               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ]               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ;               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    L_OP            reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    G_OP            reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    LE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    GE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    EQ_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    NE_OP           reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    ,               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)
    )               reduce using rule 28 (OperationConstant -> IDENTIFIER_ID .)


state 66

    (29) OperationStatementInBracket -> ( . OperationStatement )
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationStatement             shift and go to state 105
    OperationConstant              shift and go to state 106
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 67

    (31) MinusVariable -> OperationVarDeclare . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationVarDeclare            shift and go to state 67
    OperationConstant              shift and go to state 107
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 68

    (37) CONSTANT_ALL -> CONSTANT .

    +               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    -               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    *               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    /               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    %               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    ]               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    ;               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    L_OP            reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    G_OP            reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    LE_OP           reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    GE_OP           reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    EQ_OP           reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    NE_OP           reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    ,               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)
    )               reduce using rule 37 (CONSTANT_ALL -> CONSTANT .)


state 69

    (43) OperationVarDeclare -> + .

    (               reduce using rule 43 (OperationVarDeclare -> + .)
    IDENTIFIER      reduce using rule 43 (OperationVarDeclare -> + .)
    +               reduce using rule 43 (OperationVarDeclare -> + .)
    -               reduce using rule 43 (OperationVarDeclare -> + .)
    CONSTANT10      reduce using rule 43 (OperationVarDeclare -> + .)
    CONSTANT16      reduce using rule 43 (OperationVarDeclare -> + .)


state 70

    (44) OperationVarDeclare -> - .

    (               reduce using rule 44 (OperationVarDeclare -> - .)
    IDENTIFIER      reduce using rule 44 (OperationVarDeclare -> - .)
    +               reduce using rule 44 (OperationVarDeclare -> - .)
    -               reduce using rule 44 (OperationVarDeclare -> - .)
    CONSTANT10      reduce using rule 44 (OperationVarDeclare -> - .)
    CONSTANT16      reduce using rule 44 (OperationVarDeclare -> - .)


state 71

    (39) CONSTANT -> CONSTANT10 .

    +               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    -               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    *               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    /               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    %               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    ]               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    ;               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    L_OP            reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    G_OP            reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    LE_OP           reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    GE_OP           reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    EQ_OP           reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    NE_OP           reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    ,               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    )               reduce using rule 39 (CONSTANT -> CONSTANT10 .)
    }               reduce using rule 39 (CONSTANT -> CONSTANT10 .)


state 72

    (40) CONSTANT -> CONSTANT16 .

    +               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    -               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    *               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    /               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    %               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    ]               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    ;               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    L_OP            reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    G_OP            reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    LE_OP           reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    GE_OP           reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    EQ_OP           reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    NE_OP           reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    ,               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    )               reduce using rule 40 (CONSTANT -> CONSTANT16 .)
    }               reduce using rule 40 (CONSTANT -> CONSTANT16 .)


state 73

    (50) Expression -> IDENTIFIER_ID = OperationConstant . ;
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    ;               shift and go to state 108
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 74

    (51) Expression -> IDENTIFIER_ID = DQ_MSG . ;

    ;               shift and go to state 109


state 75

    (38) CONSTANT_ALL -> IDENTIFIER .
    (36) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

  ! reduce/reduce conflict for ; resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for + resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for - resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for * resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for / resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for % resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for L_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for G_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for LE_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for GE_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for EQ_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for NE_OP resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for , resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ) resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
  ! reduce/reduce conflict for ] resolved using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    ;               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    +               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    -               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    *               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    /               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    %               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    L_OP            reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    G_OP            reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    LE_OP           reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    GE_OP           reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    EQ_OP           reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    NE_OP           reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    ,               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    )               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    ]               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 78

  ! ;               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! +               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! -               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! *               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! /               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! %               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! L_OP            [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! G_OP            [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! LE_OP           [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! GE_OP           [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! EQ_OP           [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! NE_OP           [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ,               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! )               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]
  ! ]               [ reduce using rule 38 (CONSTANT_ALL -> IDENTIFIER .) ]


state 76

    (53) Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .

    STRING          reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    IF              reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    WHILE           reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    FOR             reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    DO              reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    PRINT_LN        reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INT             reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INT16           reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    IDENTIFIER      reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    INC_OP          reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    DEC_OP          reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    PRINT           reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    $end            reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)
    }               reduce using rule 53 (Expression -> IDENTIFIER_ID INC_DEC_OPRERATOR ; .)


state 77

    (54) Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .

    STRING          reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    IF              reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    WHILE           reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    FOR             reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    DO              reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    PRINT_LN        reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INT             reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INT16           reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    IDENTIFIER      reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    INC_OP          reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    DEC_OP          reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    PRINT           reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    $end            reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)
    }               reduce using rule 54 (Expression -> INC_DEC_OPRERATOR IDENTIFIER_ID ; .)


state 78

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ . ARRAY_SIZE ]
    (22) ARRAY_SIZE -> . IDENTIFIER
    (23) ARRAY_SIZE -> . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 57
    (               shift and go to state 66
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    ARRAY_SIZE                     shift and go to state 59
    OperationConstant              shift and go to state 60
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 79

    (55) If_Statement -> IF ( Compare_Expreession . ) { statements } Elif_Else

    )               shift and go to state 110


state 80

    (69) Compare_Expreession -> OperationConstant . Compare_Operator OperationConstant
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (70) Compare_Operator -> . L_OP
    (71) Compare_Operator -> . G_OP
    (72) Compare_Operator -> . LE_OP
    (73) Compare_Operator -> . GE_OP
    (74) Compare_Operator -> . EQ_OP
    (75) Compare_Operator -> . NE_OP
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    L_OP            shift and go to state 112
    G_OP            shift and go to state 113
    LE_OP           shift and go to state 114
    GE_OP           shift and go to state 115
    EQ_OP           shift and go to state 116
    NE_OP           shift and go to state 117
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Compare_Operator               shift and go to state 111
    Operator                       shift and go to state 99

state 81

    (76) While_Loop -> WHILE ( Compare_Expreession . ) { statements }

    )               shift and go to state 118


state 82

    (77) For_Loop -> FOR ( DeclarationTypeNumber . IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber . IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    IDENTIFIER      shift and go to state 119


state 83

    (79) For_Loop -> FOR ( IDENTIFIER . = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER . = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    =               shift and go to state 120


state 84

    (84) Do_While_Loop -> DO { statements . } WHILE ( Compare_Expreession ) ;

    }               shift and go to state 121


state 85

    (58) statements -> empty . empty
    (94) empty -> .

    }               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 122

state 86

    (59) statements -> Declaration . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    Declaration                    shift and go to state 86
    statements                     shift and go to state 123
    empty                          shift and go to state 85
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 87

    (60) statements -> Expression . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    Expression                     shift and go to state 87
    statements                     shift and go to state 124
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 88

    (61) statements -> If_Statement . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    If_Statement                   shift and go to state 88
    statements                     shift and go to state 125
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 89

    (62) statements -> While_Loop . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    While_Loop                     shift and go to state 89
    statements                     shift and go to state 126
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 90

    (63) statements -> For_Loop . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    For_Loop                       shift and go to state 90
    statements                     shift and go to state 127
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 91

    (64) statements -> Do_While_Loop . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    Do_While_Loop                  shift and go to state 91
    statements                     shift and go to state 128
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 92

    (65) statements -> Print_Console . statements
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    Print_Console                  shift and go to state 92
    statements                     shift and go to state 129
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 93

    (85) Print_Console -> PRINT_AL ( DQ_MSG . ) ;
    (86) Print_Console -> PRINT_AL ( DQ_MSG . Print_Value ) ;
    (90) Print_Value -> . empty empty empty
    (91) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (92) Print_Value -> . , CONSTANT Print_Value
    (93) Print_Value -> . , DQ_MSG Print_Value
    (94) empty -> .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 130
    ,               shift and go to state 133

  ! )               [ reduce using rule 94 (empty -> .) ]

    Print_Value                    shift and go to state 131
    empty                          shift and go to state 132

state 94

    (87) Print_Console -> PRINT_LN ( ) . empty empty ;
    (94) empty -> .

    ;               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 134

state 95

    (16) IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    ;               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    ,               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    )               reduce using rule 16 (IDENTIFIER_ASSIGN -> IDENTIFIER = OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 96

    (17) STRING_ASSIGN -> IDENTIFIER = DQ_MSG .

    ;               reduce using rule 17 (STRING_ASSIGN -> IDENTIFIER = DQ_MSG .)


state 97

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = . { MULTI_ASSIGN }

    {               shift and go to state 135


state 98

    (18) IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .

    =               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    INC_OP          reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    DEC_OP          reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ;               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    +               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    -               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    *               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    /               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    %               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ]               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    L_OP            reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    G_OP            reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    LE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    GE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    EQ_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    NE_OP           reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    ,               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)
    )               reduce using rule 18 (IDENTIFIER_ARRAY -> IDENTIFIER [ ARRAY_SIZE ] .)


state 99

    (30) OperationStatement -> OperationConstant Operator . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 136
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 100

    (45) Operator -> + .

    (               reduce using rule 45 (Operator -> + .)
    IDENTIFIER      reduce using rule 45 (Operator -> + .)
    +               reduce using rule 45 (Operator -> + .)
    -               reduce using rule 45 (Operator -> + .)
    CONSTANT10      reduce using rule 45 (Operator -> + .)
    CONSTANT16      reduce using rule 45 (Operator -> + .)


state 101

    (46) Operator -> - .

    (               reduce using rule 46 (Operator -> - .)
    IDENTIFIER      reduce using rule 46 (Operator -> - .)
    +               reduce using rule 46 (Operator -> - .)
    -               reduce using rule 46 (Operator -> - .)
    CONSTANT10      reduce using rule 46 (Operator -> - .)
    CONSTANT16      reduce using rule 46 (Operator -> - .)


state 102

    (47) Operator -> * .

    (               reduce using rule 47 (Operator -> * .)
    IDENTIFIER      reduce using rule 47 (Operator -> * .)
    +               reduce using rule 47 (Operator -> * .)
    -               reduce using rule 47 (Operator -> * .)
    CONSTANT10      reduce using rule 47 (Operator -> * .)
    CONSTANT16      reduce using rule 47 (Operator -> * .)


state 103

    (48) Operator -> / .

    (               reduce using rule 48 (Operator -> / .)
    IDENTIFIER      reduce using rule 48 (Operator -> / .)
    +               reduce using rule 48 (Operator -> / .)
    -               reduce using rule 48 (Operator -> / .)
    CONSTANT10      reduce using rule 48 (Operator -> / .)
    CONSTANT16      reduce using rule 48 (Operator -> / .)


state 104

    (49) Operator -> % .

    (               reduce using rule 49 (Operator -> % .)
    IDENTIFIER      reduce using rule 49 (Operator -> % .)
    +               reduce using rule 49 (Operator -> % .)
    -               reduce using rule 49 (Operator -> % .)
    CONSTANT10      reduce using rule 49 (Operator -> % .)
    CONSTANT16      reduce using rule 49 (Operator -> % .)


state 105

    (29) OperationStatementInBracket -> ( OperationStatement . )
    (24) OperationConstant -> OperationStatement .

    )               shift and go to state 137
    +               reduce using rule 24 (OperationConstant -> OperationStatement .)
    -               reduce using rule 24 (OperationConstant -> OperationStatement .)
    *               reduce using rule 24 (OperationConstant -> OperationStatement .)
    /               reduce using rule 24 (OperationConstant -> OperationStatement .)
    %               reduce using rule 24 (OperationConstant -> OperationStatement .)


state 106

    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 107

    (31) MinusVariable -> OperationVarDeclare OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    ]               reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    ;               reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    L_OP            reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    G_OP            reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    LE_OP           reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    GE_OP           reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    EQ_OP           reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    NE_OP           reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    ,               reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    )               reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

  ! +               [ reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! -               [ reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! *               [ reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! /               [ reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .) ]
  ! %               [ reduce using rule 31 (MinusVariable -> OperationVarDeclare OperationConstant .) ]

    Operator                       shift and go to state 99

state 108

    (50) Expression -> IDENTIFIER_ID = OperationConstant ; .

    STRING          reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    IF              reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    WHILE           reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    FOR             reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    DO              reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    PRINT_LN        reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INT             reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INT16           reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    IDENTIFIER      reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    INC_OP          reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    DEC_OP          reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    PRINT           reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    $end            reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)
    }               reduce using rule 50 (Expression -> IDENTIFIER_ID = OperationConstant ; .)


state 109

    (51) Expression -> IDENTIFIER_ID = DQ_MSG ; .

    STRING          reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    IF              reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    WHILE           reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    FOR             reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    DO              reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    PRINT_LN        reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INT             reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INT16           reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    IDENTIFIER      reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    INC_OP          reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    DEC_OP          reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    PRINT           reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    $end            reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)
    }               reduce using rule 51 (Expression -> IDENTIFIER_ID = DQ_MSG ; .)


state 110

    (55) If_Statement -> IF ( Compare_Expreession ) . { statements } Elif_Else

    {               shift and go to state 138


state 111

    (69) Compare_Expreession -> OperationConstant Compare_Operator . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 139
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 112

    (70) Compare_Operator -> L_OP .

    (               reduce using rule 70 (Compare_Operator -> L_OP .)
    IDENTIFIER      reduce using rule 70 (Compare_Operator -> L_OP .)
    +               reduce using rule 70 (Compare_Operator -> L_OP .)
    -               reduce using rule 70 (Compare_Operator -> L_OP .)
    CONSTANT10      reduce using rule 70 (Compare_Operator -> L_OP .)
    CONSTANT16      reduce using rule 70 (Compare_Operator -> L_OP .)


state 113

    (71) Compare_Operator -> G_OP .

    (               reduce using rule 71 (Compare_Operator -> G_OP .)
    IDENTIFIER      reduce using rule 71 (Compare_Operator -> G_OP .)
    +               reduce using rule 71 (Compare_Operator -> G_OP .)
    -               reduce using rule 71 (Compare_Operator -> G_OP .)
    CONSTANT10      reduce using rule 71 (Compare_Operator -> G_OP .)
    CONSTANT16      reduce using rule 71 (Compare_Operator -> G_OP .)


state 114

    (72) Compare_Operator -> LE_OP .

    (               reduce using rule 72 (Compare_Operator -> LE_OP .)
    IDENTIFIER      reduce using rule 72 (Compare_Operator -> LE_OP .)
    +               reduce using rule 72 (Compare_Operator -> LE_OP .)
    -               reduce using rule 72 (Compare_Operator -> LE_OP .)
    CONSTANT10      reduce using rule 72 (Compare_Operator -> LE_OP .)
    CONSTANT16      reduce using rule 72 (Compare_Operator -> LE_OP .)


state 115

    (73) Compare_Operator -> GE_OP .

    (               reduce using rule 73 (Compare_Operator -> GE_OP .)
    IDENTIFIER      reduce using rule 73 (Compare_Operator -> GE_OP .)
    +               reduce using rule 73 (Compare_Operator -> GE_OP .)
    -               reduce using rule 73 (Compare_Operator -> GE_OP .)
    CONSTANT10      reduce using rule 73 (Compare_Operator -> GE_OP .)
    CONSTANT16      reduce using rule 73 (Compare_Operator -> GE_OP .)


state 116

    (74) Compare_Operator -> EQ_OP .

    (               reduce using rule 74 (Compare_Operator -> EQ_OP .)
    IDENTIFIER      reduce using rule 74 (Compare_Operator -> EQ_OP .)
    +               reduce using rule 74 (Compare_Operator -> EQ_OP .)
    -               reduce using rule 74 (Compare_Operator -> EQ_OP .)
    CONSTANT10      reduce using rule 74 (Compare_Operator -> EQ_OP .)
    CONSTANT16      reduce using rule 74 (Compare_Operator -> EQ_OP .)


state 117

    (75) Compare_Operator -> NE_OP .

    (               reduce using rule 75 (Compare_Operator -> NE_OP .)
    IDENTIFIER      reduce using rule 75 (Compare_Operator -> NE_OP .)
    +               reduce using rule 75 (Compare_Operator -> NE_OP .)
    -               reduce using rule 75 (Compare_Operator -> NE_OP .)
    CONSTANT10      reduce using rule 75 (Compare_Operator -> NE_OP .)
    CONSTANT16      reduce using rule 75 (Compare_Operator -> NE_OP .)


state 118

    (76) While_Loop -> WHILE ( Compare_Expreession ) . { statements }

    {               shift and go to state 140


state 119

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER . = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER . = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }

    =               shift and go to state 141


state 120

    (79) For_Loop -> FOR ( IDENTIFIER = . OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER = . OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 142
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 121

    (84) Do_While_Loop -> DO { statements } . WHILE ( Compare_Expreession ) ;

    WHILE           shift and go to state 143


state 122

    (58) statements -> empty empty .

    }               reduce using rule 58 (statements -> empty empty .)


state 123

    (59) statements -> Declaration statements .

    }               reduce using rule 59 (statements -> Declaration statements .)


state 124

    (60) statements -> Expression statements .

    }               reduce using rule 60 (statements -> Expression statements .)


state 125

    (61) statements -> If_Statement statements .

    }               reduce using rule 61 (statements -> If_Statement statements .)


state 126

    (62) statements -> While_Loop statements .

    }               reduce using rule 62 (statements -> While_Loop statements .)


state 127

    (63) statements -> For_Loop statements .

    }               reduce using rule 63 (statements -> For_Loop statements .)


state 128

    (64) statements -> Do_While_Loop statements .

    }               reduce using rule 64 (statements -> Do_While_Loop statements .)


state 129

    (65) statements -> Print_Console statements .

    }               reduce using rule 65 (statements -> Print_Console statements .)


state 130

    (85) Print_Console -> PRINT_AL ( DQ_MSG ) . ;

    ;               shift and go to state 144


state 131

    (86) Print_Console -> PRINT_AL ( DQ_MSG Print_Value . ) ;

    )               shift and go to state 145


state 132

    (90) Print_Value -> empty . empty empty
    (94) empty -> .

    )               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 146

state 133

    (91) Print_Value -> , . IDENTIFIER_ALL Print_Value
    (92) Print_Value -> , . CONSTANT Print_Value
    (93) Print_Value -> , . DQ_MSG Print_Value
    (32) IDENTIFIER_ALL -> . IDENTIFIER_ASSIGN
    (33) IDENTIFIER_ALL -> . IDENTIFIER_ARRAY
    (34) IDENTIFIER_ALL -> . IDENTIFIER
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (16) IDENTIFIER_ASSIGN -> . IDENTIFIER = OperationConstant
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    DQ_MSG          shift and go to state 149
    IDENTIFIER      shift and go to state 150
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    IDENTIFIER_ALL                 shift and go to state 147
    CONSTANT                       shift and go to state 148
    IDENTIFIER_ASSIGN              shift and go to state 33
    IDENTIFIER_ARRAY               shift and go to state 34

state 134

    (87) Print_Console -> PRINT_LN ( ) empty . empty ;
    (94) empty -> .

    ;               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 151

state 135

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { . MULTI_ASSIGN }
    (20) MULTI_ASSIGN -> . CONSTANT , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> . CONSTANT empty
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16

    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    MULTI_ASSIGN                   shift and go to state 152
    CONSTANT                       shift and go to state 153

state 136

    (30) OperationStatement -> OperationConstant Operator OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
    ]               reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    ;               reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    L_OP            reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    G_OP            reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    LE_OP           reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    GE_OP           reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    EQ_OP           reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    NE_OP           reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    ,               reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    )               reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

  ! +               [ reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .) ]
  ! -               [ reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .) ]
  ! *               [ reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .) ]
  ! /               [ reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .) ]
  ! %               [ reduce using rule 30 (OperationStatement -> OperationConstant Operator OperationConstant .) ]

    Operator                       shift and go to state 99

state 137

    (29) OperationStatementInBracket -> ( OperationStatement ) .

    +               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    -               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    *               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    /               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    %               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ]               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ;               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    L_OP            reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    G_OP            reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    LE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    GE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    EQ_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    NE_OP           reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    ,               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)
    )               reduce using rule 29 (OperationStatementInBracket -> ( OperationStatement ) .)


state 138

    (55) If_Statement -> IF ( Compare_Expreession ) { . statements } Elif_Else
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 154
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 139

    (69) Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    )               reduce using rule 69 (Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .)
    ;               reduce using rule 69 (Compare_Expreession -> OperationConstant Compare_Operator OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 140

    (76) While_Loop -> WHILE ( Compare_Expreession ) { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 155
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 141

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = . OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = . OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 156
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 142

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant . ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant . ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    ;               shift and go to state 157
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 143

    (84) Do_While_Loop -> DO { statements } WHILE . ( Compare_Expreession ) ;

    (               shift and go to state 158


state 144

    (85) Print_Console -> PRINT_AL ( DQ_MSG ) ; .

    STRING          reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    IF              reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    WHILE           reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    FOR             reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    DO              reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    PRINT_LN        reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    INT             reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    INT16           reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    IDENTIFIER      reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    INC_OP          reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    DEC_OP          reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    PRINT           reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    $end            reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)
    }               reduce using rule 85 (Print_Console -> PRINT_AL ( DQ_MSG ) ; .)


state 145

    (86) Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) . ;

    ;               shift and go to state 159


state 146

    (90) Print_Value -> empty empty . empty
    (94) empty -> .

    )               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 160

state 147

    (91) Print_Value -> , IDENTIFIER_ALL . Print_Value
    (90) Print_Value -> . empty empty empty
    (91) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (92) Print_Value -> . , CONSTANT Print_Value
    (93) Print_Value -> . , DQ_MSG Print_Value
    (94) empty -> .

    ,               shift and go to state 133
    )               reduce using rule 94 (empty -> .)

    Print_Value                    shift and go to state 161
    empty                          shift and go to state 132

state 148

    (92) Print_Value -> , CONSTANT . Print_Value
    (90) Print_Value -> . empty empty empty
    (91) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (92) Print_Value -> . , CONSTANT Print_Value
    (93) Print_Value -> . , DQ_MSG Print_Value
    (94) empty -> .

    ,               shift and go to state 133
    )               reduce using rule 94 (empty -> .)

    Print_Value                    shift and go to state 162
    empty                          shift and go to state 132

state 149

    (93) Print_Value -> , DQ_MSG . Print_Value
    (90) Print_Value -> . empty empty empty
    (91) Print_Value -> . , IDENTIFIER_ALL Print_Value
    (92) Print_Value -> . , CONSTANT Print_Value
    (93) Print_Value -> . , DQ_MSG Print_Value
    (94) empty -> .

    ,               shift and go to state 133
    )               reduce using rule 94 (empty -> .)

    Print_Value                    shift and go to state 163
    empty                          shift and go to state 132

state 150

    (34) IDENTIFIER_ALL -> IDENTIFIER .
    (16) IDENTIFIER_ASSIGN -> IDENTIFIER . = OperationConstant
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]

    ,               reduce using rule 34 (IDENTIFIER_ALL -> IDENTIFIER .)
    )               reduce using rule 34 (IDENTIFIER_ALL -> IDENTIFIER .)
    =               shift and go to state 52
    [               shift and go to state 78


state 151

    (87) Print_Console -> PRINT_LN ( ) empty empty . ;

    ;               shift and go to state 164


state 152

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN . }

    }               shift and go to state 165


state 153

    (20) MULTI_ASSIGN -> CONSTANT . , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> CONSTANT . empty
    (94) empty -> .

    ,               shift and go to state 166
    }               reduce using rule 94 (empty -> .)

    empty                          shift and go to state 167

state 154

    (55) If_Statement -> IF ( Compare_Expreession ) { statements . } Elif_Else

    }               shift and go to state 168


state 155

    (76) While_Loop -> WHILE ( Compare_Expreession ) { statements . }

    }               shift and go to state 169


state 156

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant . ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant . ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    ;               shift and go to state 170
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 157

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; . Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; . Compare_Expreession ; For_Loop_Crement ) { statements }
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 80
    Compare_Expreession            shift and go to state 171
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 158

    (84) Do_While_Loop -> DO { statements } WHILE ( . Compare_Expreession ) ;
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    Compare_Expreession            shift and go to state 172
    OperationConstant              shift and go to state 80
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 159

    (86) Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .

    STRING          reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    IF              reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    WHILE           reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    FOR             reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    DO              reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    PRINT_LN        reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    INT             reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    INT16           reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    IDENTIFIER      reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    INC_OP          reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    DEC_OP          reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    PRINT           reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    $end            reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)
    }               reduce using rule 86 (Print_Console -> PRINT_AL ( DQ_MSG Print_Value ) ; .)


state 160

    (90) Print_Value -> empty empty empty .

    )               reduce using rule 90 (Print_Value -> empty empty empty .)


state 161

    (91) Print_Value -> , IDENTIFIER_ALL Print_Value .

    )               reduce using rule 91 (Print_Value -> , IDENTIFIER_ALL Print_Value .)


state 162

    (92) Print_Value -> , CONSTANT Print_Value .

    )               reduce using rule 92 (Print_Value -> , CONSTANT Print_Value .)


state 163

    (93) Print_Value -> , DQ_MSG Print_Value .

    )               reduce using rule 93 (Print_Value -> , DQ_MSG Print_Value .)


state 164

    (87) Print_Console -> PRINT_LN ( ) empty empty ; .

    STRING          reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    IF              reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    WHILE           reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    FOR             reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    DO              reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    PRINT_LN        reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    INT             reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    INT16           reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    IDENTIFIER      reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    INC_OP          reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    DEC_OP          reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    PRINT           reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    $end            reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)
    }               reduce using rule 87 (Print_Console -> PRINT_LN ( ) empty empty ; .)


state 165

    (19) ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN } .

    ;               reduce using rule 19 (ARRAY_MULTI_ASSIGN -> IDENTIFIER [ ] = { MULTI_ASSIGN } .)


state 166

    (20) MULTI_ASSIGN -> CONSTANT , . MULTI_ASSIGN
    (20) MULTI_ASSIGN -> . CONSTANT , MULTI_ASSIGN
    (21) MULTI_ASSIGN -> . CONSTANT empty
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16

    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    CONSTANT                       shift and go to state 153
    MULTI_ASSIGN                   shift and go to state 173

state 167

    (21) MULTI_ASSIGN -> CONSTANT empty .

    }               reduce using rule 21 (MULTI_ASSIGN -> CONSTANT empty .)


state 168

    (55) If_Statement -> IF ( Compare_Expreession ) { statements } . Elif_Else
    (66) Elif_Else -> . empty
    (67) Elif_Else -> . Elif_Statement
    (68) Elif_Else -> . Else_Statement
    (94) empty -> .
    (56) Elif_Statement -> . ELIF ( Compare_Expreession ) { statements } Elif_Else
    (57) Else_Statement -> . ELSE { statements }

    STRING          reduce using rule 94 (empty -> .)
    IF              reduce using rule 94 (empty -> .)
    WHILE           reduce using rule 94 (empty -> .)
    FOR             reduce using rule 94 (empty -> .)
    DO              reduce using rule 94 (empty -> .)
    PRINT_LN        reduce using rule 94 (empty -> .)
    INT             reduce using rule 94 (empty -> .)
    INT16           reduce using rule 94 (empty -> .)
    IDENTIFIER      reduce using rule 94 (empty -> .)
    INC_OP          reduce using rule 94 (empty -> .)
    DEC_OP          reduce using rule 94 (empty -> .)
    PRINT           reduce using rule 94 (empty -> .)
    $end            reduce using rule 94 (empty -> .)
    }               reduce using rule 94 (empty -> .)
    ELIF            shift and go to state 178
    ELSE            shift and go to state 179

    Elif_Else                      shift and go to state 174
    empty                          shift and go to state 175
    Elif_Statement                 shift and go to state 176
    Else_Statement                 shift and go to state 177

state 169

    (76) While_Loop -> WHILE ( Compare_Expreession ) { statements } .

    STRING          reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    IF              reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    WHILE           reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    FOR             reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    DO              reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    PRINT_LN        reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INT             reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INT16           reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    IDENTIFIER      reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    INC_OP          reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    DEC_OP          reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    PRINT           reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    $end            reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)
    }               reduce using rule 76 (While_Loop -> WHILE ( Compare_Expreession ) { statements } .)


state 170

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; . Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; . Compare_Expreession ; For_Loop_Crement ) { statements }
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    OperationConstant              shift and go to state 80
    Compare_Expreession            shift and go to state 180
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 171

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession . ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession . ; For_Loop_Crement ) { statements }

    ;               shift and go to state 181


state 172

    (84) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession . ) ;

    )               shift and go to state 182


state 173

    (20) MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN .

    }               reduce using rule 20 (MULTI_ASSIGN -> CONSTANT , MULTI_ASSIGN .)


state 174

    (55) If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .

    STRING          reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    IF              reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    WHILE           reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    FOR             reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    DO              reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT_LN        reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INT             reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INT16           reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    IDENTIFIER      reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    INC_OP          reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    DEC_OP          reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT           reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    $end            reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)
    }               reduce using rule 55 (If_Statement -> IF ( Compare_Expreession ) { statements } Elif_Else .)


state 175

    (66) Elif_Else -> empty .

    STRING          reduce using rule 66 (Elif_Else -> empty .)
    IF              reduce using rule 66 (Elif_Else -> empty .)
    WHILE           reduce using rule 66 (Elif_Else -> empty .)
    FOR             reduce using rule 66 (Elif_Else -> empty .)
    DO              reduce using rule 66 (Elif_Else -> empty .)
    PRINT_LN        reduce using rule 66 (Elif_Else -> empty .)
    INT             reduce using rule 66 (Elif_Else -> empty .)
    INT16           reduce using rule 66 (Elif_Else -> empty .)
    IDENTIFIER      reduce using rule 66 (Elif_Else -> empty .)
    INC_OP          reduce using rule 66 (Elif_Else -> empty .)
    DEC_OP          reduce using rule 66 (Elif_Else -> empty .)
    PRINT           reduce using rule 66 (Elif_Else -> empty .)
    $end            reduce using rule 66 (Elif_Else -> empty .)
    }               reduce using rule 66 (Elif_Else -> empty .)


state 176

    (67) Elif_Else -> Elif_Statement .

    STRING          reduce using rule 67 (Elif_Else -> Elif_Statement .)
    IF              reduce using rule 67 (Elif_Else -> Elif_Statement .)
    WHILE           reduce using rule 67 (Elif_Else -> Elif_Statement .)
    FOR             reduce using rule 67 (Elif_Else -> Elif_Statement .)
    DO              reduce using rule 67 (Elif_Else -> Elif_Statement .)
    PRINT_LN        reduce using rule 67 (Elif_Else -> Elif_Statement .)
    INT             reduce using rule 67 (Elif_Else -> Elif_Statement .)
    INT16           reduce using rule 67 (Elif_Else -> Elif_Statement .)
    IDENTIFIER      reduce using rule 67 (Elif_Else -> Elif_Statement .)
    INC_OP          reduce using rule 67 (Elif_Else -> Elif_Statement .)
    DEC_OP          reduce using rule 67 (Elif_Else -> Elif_Statement .)
    PRINT           reduce using rule 67 (Elif_Else -> Elif_Statement .)
    $end            reduce using rule 67 (Elif_Else -> Elif_Statement .)
    }               reduce using rule 67 (Elif_Else -> Elif_Statement .)


state 177

    (68) Elif_Else -> Else_Statement .

    STRING          reduce using rule 68 (Elif_Else -> Else_Statement .)
    IF              reduce using rule 68 (Elif_Else -> Else_Statement .)
    WHILE           reduce using rule 68 (Elif_Else -> Else_Statement .)
    FOR             reduce using rule 68 (Elif_Else -> Else_Statement .)
    DO              reduce using rule 68 (Elif_Else -> Else_Statement .)
    PRINT_LN        reduce using rule 68 (Elif_Else -> Else_Statement .)
    INT             reduce using rule 68 (Elif_Else -> Else_Statement .)
    INT16           reduce using rule 68 (Elif_Else -> Else_Statement .)
    IDENTIFIER      reduce using rule 68 (Elif_Else -> Else_Statement .)
    INC_OP          reduce using rule 68 (Elif_Else -> Else_Statement .)
    DEC_OP          reduce using rule 68 (Elif_Else -> Else_Statement .)
    PRINT           reduce using rule 68 (Elif_Else -> Else_Statement .)
    $end            reduce using rule 68 (Elif_Else -> Else_Statement .)
    }               reduce using rule 68 (Elif_Else -> Else_Statement .)


state 178

    (56) Elif_Statement -> ELIF . ( Compare_Expreession ) { statements } Elif_Else

    (               shift and go to state 183


state 179

    (57) Else_Statement -> ELSE . { statements }

    {               shift and go to state 184


state 180

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession . ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession . ; For_Loop_Crement ) { statements }

    ;               shift and go to state 185


state 181

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; . IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; . For_Loop_Crement ) { statements }
    (81) IDENTIFIER_ALL_ASSIGN -> . IDENTIFIER_ID = OperationConstant
    (82) For_Loop_Crement -> . IDENTIFIER INC_DEC_OPRERATOR
    (83) For_Loop_Crement -> . INC_DEC_OPRERATOR IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 186
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    IDENTIFIER_ALL_ASSIGN          shift and go to state 187
    For_Loop_Crement               shift and go to state 188
    IDENTIFIER_ID                  shift and go to state 189
    INC_DEC_OPRERATOR              shift and go to state 190
    IDENTIFIER_ARRAY               shift and go to state 25

state 182

    (84) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) . ;

    ;               shift and go to state 191


state 183

    (56) Elif_Statement -> ELIF ( . Compare_Expreession ) { statements } Elif_Else
    (69) Compare_Expreession -> . OperationConstant Compare_Operator OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    Compare_Expreession            shift and go to state 192
    OperationConstant              shift and go to state 80
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    IDENTIFIER_ID                  shift and go to state 65
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 184

    (57) Else_Statement -> ELSE { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 193
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 185

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; . IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; . For_Loop_Crement ) { statements }
    (81) IDENTIFIER_ALL_ASSIGN -> . IDENTIFIER_ID = OperationConstant
    (82) For_Loop_Crement -> . IDENTIFIER INC_DEC_OPRERATOR
    (83) For_Loop_Crement -> . INC_DEC_OPRERATOR IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    IDENTIFIER      shift and go to state 186
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    IDENTIFIER_ALL_ASSIGN          shift and go to state 194
    For_Loop_Crement               shift and go to state 195
    IDENTIFIER_ID                  shift and go to state 189
    INC_DEC_OPRERATOR              shift and go to state 190
    IDENTIFIER_ARRAY               shift and go to state 25

state 186

    (82) For_Loop_Crement -> IDENTIFIER . INC_DEC_OPRERATOR
    (36) IDENTIFIER_ID -> IDENTIFIER .
    (18) IDENTIFIER_ARRAY -> IDENTIFIER . [ ARRAY_SIZE ]
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP

    =               reduce using rule 36 (IDENTIFIER_ID -> IDENTIFIER .)
    [               shift and go to state 78
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27

    INC_DEC_OPRERATOR              shift and go to state 196

state 187

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN . ) { statements }

    )               shift and go to state 197


state 188

    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement . ) { statements }

    )               shift and go to state 198


state 189

    (81) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID . = OperationConstant

    =               shift and go to state 199


state 190

    (83) For_Loop_Crement -> INC_DEC_OPRERATOR . IDENTIFIER

    IDENTIFIER      shift and go to state 200


state 191

    (84) Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .

    STRING          reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    IF              reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    WHILE           reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    FOR             reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    DO              reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    PRINT_LN        reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INT             reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INT16           reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    IDENTIFIER      reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    INC_OP          reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    DEC_OP          reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    PRINT           reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    $end            reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)
    }               reduce using rule 84 (Do_While_Loop -> DO { statements } WHILE ( Compare_Expreession ) ; .)


state 192

    (56) Elif_Statement -> ELIF ( Compare_Expreession . ) { statements } Elif_Else

    )               shift and go to state 201


state 193

    (57) Else_Statement -> ELSE { statements . }

    }               shift and go to state 202


state 194

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN . ) { statements }

    )               shift and go to state 203


state 195

    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement . ) { statements }

    )               shift and go to state 204


state 196

    (82) For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR .

    )               reduce using rule 82 (For_Loop_Crement -> IDENTIFIER INC_DEC_OPRERATOR .)


state 197

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) . { statements }

    {               shift and go to state 205


state 198

    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) . { statements }

    {               shift and go to state 206


state 199

    (81) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = . OperationConstant
    (24) OperationConstant -> . OperationStatement
    (25) OperationConstant -> . OperationStatementInBracket
    (26) OperationConstant -> . MinusVariable
    (27) OperationConstant -> . CONSTANT_ALL
    (28) OperationConstant -> . IDENTIFIER_ID
    (30) OperationStatement -> . OperationConstant Operator OperationConstant
    (29) OperationStatementInBracket -> . ( OperationStatement )
    (31) MinusVariable -> . OperationVarDeclare OperationConstant
    (37) CONSTANT_ALL -> . CONSTANT
    (38) CONSTANT_ALL -> . IDENTIFIER
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (43) OperationVarDeclare -> . +
    (44) OperationVarDeclare -> . -
    (39) CONSTANT -> . CONSTANT10
    (40) CONSTANT -> . CONSTANT16
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    (               shift and go to state 66
    IDENTIFIER      shift and go to state 75
    +               shift and go to state 69
    -               shift and go to state 70
    CONSTANT10      shift and go to state 71
    CONSTANT16      shift and go to state 72

    IDENTIFIER_ID                  shift and go to state 65
    OperationConstant              shift and go to state 207
    OperationStatement             shift and go to state 61
    OperationStatementInBracket    shift and go to state 62
    MinusVariable                  shift and go to state 63
    CONSTANT_ALL                   shift and go to state 64
    OperationVarDeclare            shift and go to state 67
    CONSTANT                       shift and go to state 68
    IDENTIFIER_ARRAY               shift and go to state 25

state 200

    (83) For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER .

    )               reduce using rule 83 (For_Loop_Crement -> INC_DEC_OPRERATOR IDENTIFIER .)


state 201

    (56) Elif_Statement -> ELIF ( Compare_Expreession ) . { statements } Elif_Else

    {               shift and go to state 208


state 202

    (57) Else_Statement -> ELSE { statements } .

    STRING          reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    IF              reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    WHILE           reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    FOR             reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    DO              reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    PRINT_LN        reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    INT             reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    INT16           reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    IDENTIFIER      reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    INC_OP          reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    DEC_OP          reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    PRINT           reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    $end            reduce using rule 57 (Else_Statement -> ELSE { statements } .)
    }               reduce using rule 57 (Else_Statement -> ELSE { statements } .)


state 203

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) . { statements }

    {               shift and go to state 209


state 204

    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) . { statements }

    {               shift and go to state 210


state 205

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 211
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 206

    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 212
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 207

    (81) IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant .
    (30) OperationStatement -> OperationConstant . Operator OperationConstant
    (45) Operator -> . +
    (46) Operator -> . -
    (47) Operator -> . *
    (48) Operator -> . /
    (49) Operator -> . %

    )               reduce using rule 81 (IDENTIFIER_ALL_ASSIGN -> IDENTIFIER_ID = OperationConstant .)
    +               shift and go to state 100
    -               shift and go to state 101
    *               shift and go to state 102
    /               shift and go to state 103
    %               shift and go to state 104

    Operator                       shift and go to state 99

state 208

    (56) Elif_Statement -> ELIF ( Compare_Expreession ) { . statements } Elif_Else
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    statements                     shift and go to state 213
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    DeclarationTypeNumber          shift and go to state 11
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 209

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    DeclarationTypeNumber          shift and go to state 11
    statements                     shift and go to state 214
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 210

    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { . statements }
    (58) statements -> . empty empty
    (59) statements -> . Declaration statements
    (60) statements -> . Expression statements
    (61) statements -> . If_Statement statements
    (62) statements -> . While_Loop statements
    (63) statements -> . For_Loop statements
    (64) statements -> . Do_While_Loop statements
    (65) statements -> . Print_Console statements
    (94) empty -> .
    (10) Declaration -> . DeclarationTypeNumber IDENTIFIER_ALL ;
    (11) Declaration -> . DeclarationTypeNumber ARRAY_MULTI_ASSIGN ;
    (12) Declaration -> . STRING IDENTIFIER ;
    (13) Declaration -> . STRING STRING_ASSIGN ;
    (50) Expression -> . IDENTIFIER_ID = OperationConstant ;
    (51) Expression -> . IDENTIFIER_ID = DQ_MSG ;
    (52) Expression -> . ARRAY_MULTI_ASSIGN empty ;
    (53) Expression -> . IDENTIFIER_ID INC_DEC_OPRERATOR ;
    (54) Expression -> . INC_DEC_OPRERATOR IDENTIFIER_ID ;
    (55) If_Statement -> . IF ( Compare_Expreession ) { statements } Elif_Else
    (76) While_Loop -> . WHILE ( Compare_Expreession ) { statements }
    (77) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (78) For_Loop -> . FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (79) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements }
    (80) For_Loop -> . FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements }
    (84) Do_While_Loop -> . DO { statements } WHILE ( Compare_Expreession ) ;
    (85) Print_Console -> . PRINT_AL ( DQ_MSG ) ;
    (86) Print_Console -> . PRINT_AL ( DQ_MSG Print_Value ) ;
    (87) Print_Console -> . PRINT_LN ( ) empty empty ;
    (14) DeclarationTypeNumber -> . INT
    (15) DeclarationTypeNumber -> . INT16
    (35) IDENTIFIER_ID -> . IDENTIFIER_ARRAY
    (36) IDENTIFIER_ID -> . IDENTIFIER
    (19) ARRAY_MULTI_ASSIGN -> . IDENTIFIER [ ] = { MULTI_ASSIGN }
    (41) INC_DEC_OPRERATOR -> . INC_OP
    (42) INC_DEC_OPRERATOR -> . DEC_OP
    (88) PRINT_AL -> . PRINT
    (89) PRINT_AL -> . PRINT_LN
    (18) IDENTIFIER_ARRAY -> . IDENTIFIER [ ARRAY_SIZE ]

    }               reduce using rule 94 (empty -> .)
    STRING          shift and go to state 13
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    DO              shift and go to state 20
    PRINT_LN        shift and go to state 22
    INT             shift and go to state 23
    INT16           shift and go to state 24
    IDENTIFIER      shift and go to state 14
    INC_OP          shift and go to state 26
    DEC_OP          shift and go to state 27
    PRINT           shift and go to state 28

    DeclarationTypeNumber          shift and go to state 11
    statements                     shift and go to state 215
    empty                          shift and go to state 85
    Declaration                    shift and go to state 86
    Expression                     shift and go to state 87
    If_Statement                   shift and go to state 88
    While_Loop                     shift and go to state 89
    For_Loop                       shift and go to state 90
    Do_While_Loop                  shift and go to state 91
    Print_Console                  shift and go to state 92
    ARRAY_MULTI_ASSIGN             shift and go to state 12
    IDENTIFIER_ID                  shift and go to state 15
    INC_DEC_OPRERATOR              shift and go to state 16
    PRINT_AL                       shift and go to state 21
    IDENTIFIER_ARRAY               shift and go to state 25

state 211

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements . }

    }               shift and go to state 216


state 212

    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements . }

    }               shift and go to state 217


state 213

    (56) Elif_Statement -> ELIF ( Compare_Expreession ) { statements . } Elif_Else

    }               shift and go to state 218


state 214

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements . }

    }               shift and go to state 219


state 215

    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements . }

    }               shift and go to state 220


state 216

    (79) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .

    STRING          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IF              reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    WHILE           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    FOR             reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DO              reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT_LN        reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT             reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT16           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IDENTIFIER      reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INC_OP          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DEC_OP          reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT           reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    $end            reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    }               reduce using rule 79 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)


state 217

    (80) For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .

    STRING          reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IF              reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    WHILE           reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    FOR             reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DO              reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT_LN        reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT             reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT16           reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IDENTIFIER      reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INC_OP          reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DEC_OP          reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT           reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    $end            reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    }               reduce using rule 80 (For_Loop -> FOR ( IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)


state 218

    (56) Elif_Statement -> ELIF ( Compare_Expreession ) { statements } . Elif_Else
    (66) Elif_Else -> . empty
    (67) Elif_Else -> . Elif_Statement
    (68) Elif_Else -> . Else_Statement
    (94) empty -> .
    (56) Elif_Statement -> . ELIF ( Compare_Expreession ) { statements } Elif_Else
    (57) Else_Statement -> . ELSE { statements }

    STRING          reduce using rule 94 (empty -> .)
    IF              reduce using rule 94 (empty -> .)
    WHILE           reduce using rule 94 (empty -> .)
    FOR             reduce using rule 94 (empty -> .)
    DO              reduce using rule 94 (empty -> .)
    PRINT_LN        reduce using rule 94 (empty -> .)
    INT             reduce using rule 94 (empty -> .)
    INT16           reduce using rule 94 (empty -> .)
    IDENTIFIER      reduce using rule 94 (empty -> .)
    INC_OP          reduce using rule 94 (empty -> .)
    DEC_OP          reduce using rule 94 (empty -> .)
    PRINT           reduce using rule 94 (empty -> .)
    $end            reduce using rule 94 (empty -> .)
    }               reduce using rule 94 (empty -> .)
    ELIF            shift and go to state 178
    ELSE            shift and go to state 179

    Elif_Else                      shift and go to state 221
    empty                          shift and go to state 175
    Elif_Statement                 shift and go to state 176
    Else_Statement                 shift and go to state 177

state 219

    (77) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .

    STRING          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IF              reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    WHILE           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    FOR             reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DO              reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT_LN        reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT             reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INT16           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    IDENTIFIER      reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    INC_OP          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    DEC_OP          reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    PRINT           reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    $end            reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)
    }               reduce using rule 77 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; IDENTIFIER_ALL_ASSIGN ) { statements } .)


state 220

    (78) For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .

    STRING          reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IF              reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    WHILE           reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    FOR             reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DO              reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT_LN        reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT             reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INT16           reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    IDENTIFIER      reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    INC_OP          reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    DEC_OP          reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    PRINT           reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    $end            reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)
    }               reduce using rule 78 (For_Loop -> FOR ( DeclarationTypeNumber IDENTIFIER = OperationConstant ; Compare_Expreession ; For_Loop_Crement ) { statements } .)


state 221

    (56) Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .

    STRING          reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    IF              reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    WHILE           reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    FOR             reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    DO              reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT_LN        reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INT             reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INT16           reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    IDENTIFIER      reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    INC_OP          reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    DEC_OP          reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    PRINT           reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    $end            reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)
    }               reduce using rule 56 (Elif_Statement -> ELIF ( Compare_Expreession ) { statements } Elif_Else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 22 resolved as shift
WARNING: shift/reduce conflict for ) in state 93 resolved as shift
WARNING: shift/reduce conflict for + in state 107 resolved as shift
WARNING: shift/reduce conflict for - in state 107 resolved as shift
WARNING: shift/reduce conflict for * in state 107 resolved as shift
WARNING: shift/reduce conflict for / in state 107 resolved as shift
WARNING: shift/reduce conflict for % in state 107 resolved as shift
WARNING: shift/reduce conflict for + in state 136 resolved as shift
WARNING: shift/reduce conflict for - in state 136 resolved as shift
WARNING: shift/reduce conflict for * in state 136 resolved as shift
WARNING: shift/reduce conflict for / in state 136 resolved as shift
WARNING: shift/reduce conflict for % in state 136 resolved as shift
WARNING: reduce/reduce conflict in state 57 resolved using rule (ARRAY_SIZE -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (IDENTIFIER_ID -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 57
WARNING: reduce/reduce conflict in state 57 resolved using rule (ARRAY_SIZE -> IDENTIFIER)
WARNING: rejected rule (IDENTIFIER_ID -> IDENTIFIER) in state 57
WARNING: reduce/reduce conflict in state 75 resolved using rule (IDENTIFIER_ID -> IDENTIFIER)
WARNING: rejected rule (CONSTANT_ALL -> IDENTIFIER) in state 75
WARNING: Rule (CONSTANT_ALL -> IDENTIFIER) is never reduced
